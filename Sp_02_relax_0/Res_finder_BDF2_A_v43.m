function R = Res_finder_BDF2_A_v43(n_v_near,n_p_near,n_spines_near, ...
                         n_v_far,n_p_far,n_spines_far, ...
                         theta_c, ...
                         u_bar,w_bar,p, ...
                         lambda2,us2,ws2,rhos2,sigma2, ...
                         us1,ws1,rhos1,sigma1, ...
                         n_v_pre_start_far, ...
                         u_far,w_far, ...
                         n_p_sep, ...
                         A,l,Nodes_rz,n_Gaussian_Q,phi_G, ...
                         xi_G,eta_G,T,W_G,gr,gz,Re,delta_t,St, ...
                         Nodes_rz_minus1,Nodes_rz_minus2, ...
                         u_minus1,u_minus2,w_minus1,w_minus2, ...
                         lp,psi_G,psi_star_G, ...
                         n_el_near,n1_el_near,l_1,l1_1, ...
                         n_lGaussian_Q, W_lG,...
                         phi1_xi_lG,phi1_lG,alpha_1, ...
                         Lg,Dg,Ca,Eg,Bg,Tg,Cg, ...
                         pg,rhos1_minus1,rhos1_minus2, ...
                         contact_line,c1,c2, ...
                         phi1_xi,n_v_sep, ...
                         n2_el_near,l_2,l2_2, ...
                         phi2_eta_lG,phi2_lG,alpha_2, ...
                         Be,Ls,Ds,Es,Ts,Cs, ...
                         u_s,w_s, ...
                         rhos2_minus1,rhos2_minus2, ...
                         n4_el,l_4,l4_4, ...
                         phi4_xi_lG,phi4_lG,alpha_4, ...
                         n_el,n_p_pre_start_far,n1_el,n2_el,n3_el, ...
                         n_spines_pre_start_far,apex,n_spines, ...
                         theta_a, ...
                         l_3,phi3_xi_lG,phi3_lG,alpha_3, ...
                         alpha_5,So, ...
                         n_Mr_near,n_Mz_near,n_C_near, ...
                         n_S2_near,n_I_near,n_E2_near, ...
                         n_D2_near,n_T2_near, ...
                         n_S1_near,n_K_near,n_E1_near, ...
                         n_D1_near,n_T1_near, ...
                         n_Mr_far,n_Mz_far,n_C_far, ...
                         n_S2_far,n_I_far,n_E2_far, ...
                         n_D2_far,n_T2_far, ...
                         n_S1_far,n_K_far,n_E1_far, ...
                         n_D1_far,n_T1_far, ...
                         Mr_nodes_near,Mz_nodes_near, ...
                         C_nodes_near, ...
                         S2_nodes_near,I_nodes_near, ...
                         E2_nodes_near, ...
                         D2_nodes_near,T2_nodes_near, ...
                         S1_nodes_near,K_nodes_near, ...
                         E1_nodes_near, ...
                         D1_nodes_near,T1_nodes_near, ...
                         Mr_nodes_far,Mz_nodes_far, ...
                         C_nodes_far, ...
                         S2_nodes_far,I_nodes_far, ...
                         E2_nodes_far, ...
                         D2_nodes_far,T2_nodes_far, ...
                         S1_nodes_far,K_nodes_far, ...
                         E1_nodes_far, ...
                         D1_nodes_far,T1_nodes_far, ...
                         Tmat1,Tmat2,Tmat3,Tmat4,Tmat5, ...
                         LE_to_TE_1,LE_to_TE_2,LE_to_TE_3, ...
                         LE_to_TE_4,LE_to_TE_5, ...
                         n5_el,l_5,phi5_lG,phi5_eta_lG, ...
                         a1,o2,a_n,a_n_minus1,a_n_minus2, ...
                         n_el_sing,press_lim_node_solid, ...
                         press_lim_node_gas)
                          
%creating variables to store data for eigen-solution and singular element
u_check = zeros(1,n_Gaussian_Q);
w_check = zeros(1,n_Gaussian_Q);
dr_u_check = zeros(1,n_Gaussian_Q);
dz_u_check = zeros(1,n_Gaussian_Q);
dr_w_check = zeros(1,n_Gaussian_Q);
dz_w_check = zeros(1,n_Gaussian_Q);

%Zeroing variables used in triangle integration
det_Je = zeros(1,n_Gaussian_Q);

%Zeroing variables used in line integration
r_prime_lGaussian = zeros(1,n_lGaussian_Q);
z_prime_lGaussian = zeros(1,n_lGaussian_Q);
det_Jle = zeros(1,n_lGaussian_Q);
                          
%Finding the Residual of the initial guess for the current time
Mr_near = zeros(n_v_near,1);
Mz_near = zeros(n_v_near,1);
C_near = zeros(n_p_near,1);
S2_near = zeros(n_spines_near,1);
I_near = zeros(n_spines_near,1);
E2_near = zeros(n_spines_near,1);
D2_near = zeros(n_spines_near,1);
T2_near = zeros(n_spines_near,1);
S1_near = zeros(n_spines_near,1);
K_near = zeros(n_spines_near,1);
E1_near = zeros(n_spines_near,1);
D1_near = zeros(n_spines_near,1);
T1_near = zeros(n_spines_near,1);
Cu = zeros(n_v_sep,1);
Cw = zeros(n_v_sep,1);
Mr_far = zeros(n_v_far,1);
Mz_far = zeros(n_v_far,1);
C_far = zeros(n_p_far,1);
S2_far = zeros(n_spines_far,1);
I_far = zeros(n_spines_far,1);
E2_far = zeros(n_spines_far,1);
D2_far = zeros(n_spines_far,1);
T2_far = zeros(n_spines_far,1);
S1_far = zeros(n_spines_far,1);
K_far = zeros(n_spines_far,1);
E1_far = zeros(n_spines_far,1);
D1_far = zeros(n_spines_far,1);
T1_far = zeros(n_spines_far,1);

m1_r = -cos(theta_c);
m1_z =  sin(theta_c);
m2_r = -1;
m2_z =  0;

%Measured contact angle
r_le = Nodes_rz(l_1(1,:),1);
z_le = Nodes_rz(l_1(1,:),2);
min_r_le = min(r_le);
min_z_le = min(z_le);
tan1_r = (phi1_xi(:,2)')*(r_le-min_r_le);
tan1_z = (phi1_xi(:,2)')*(z_le-min_z_le);
theta_m = atan2(tan1_z,-tan1_r);

%Finding the lambda constant of the eigen-solution
lambda_eig = pi/theta_m;

%Adding singular element contributions
for ee = 1:n_el_sing %go through the singular element at the contact line
    %find the r and z coordinates of the element nodes
    r_e = Nodes_rz(l(ee,:),1);
    z_e = Nodes_rz(l(ee,:),2);
    min_r_e = min(r_e);
    min_z_e = min(z_e);
    for pp = 1:n_Gaussian_Q
        %Finding the singular hat functions
        r_pp = (r_e'-Nodes_rz(1,1))*phi_G(:,pp);
        z_pp = (z_e'-Nodes_rz(1,2))*phi_G(:,pp);
        divider = max(abs(r_pp),abs(z_pp));
        r_pp_div = r_pp/divider;
        z_pp_div = z_pp/divider;
        rho_l = sqrt(r_pp_div^2+z_pp_div^2);
        rho_l = rho_l*divider;
        lnR_pp = log(rho_l);
        psi_star_G(2,pp) = -(xi_G(pp)+eta_G(pp))*lnR_pp/2;
        % Find the determinant of the Jacobian of the isoparametric map
        % at each Gaussian quadrature point
        det_Je(pp) = (r_e'-min_r_e)*T{pp}*(z_e-min_z_e);
        %Data for eigensolution
        theta_pol = atan2(z_pp,r_pp);
        phi_pp = pi - theta_m - theta_pol;
        theta_pp = lambda_eig*phi_pp;
        c_theta_pp = cos(theta_pp);
        s_theta_pp = sin(theta_pp);
        rho_l_minus2_pp = rho_l^(lambda_eig-2);
        rho_l_minus4_pp = rho_l^(lambda_eig-4);
        % Find the values of u_check at the Gaussian sampling points
        u_check(pp) = check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                    rho_l_minus2_pp,c_theta_pp, ...
                                    s_theta_pp);
        % Find the values of w_check at the Gaussian sampling points
        w_check(pp) = check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                    rho_l_minus2_pp,c_theta_pp, ...
                                    s_theta_pp);
        % Find the values of dr_u_check at the Gaussian sampling points
        dr_u_check(pp) = dr_check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dz_u_check at the Gaussian sampling points
        dz_u_check(pp) = dz_check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dr_w_check at the Gaussian sampling points
        dr_w_check(pp) = dr_check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dz_w_check at the Gaussian sampling points
        dz_w_check(pp) = dz_check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
    end
    for ii = 1:6 %select each basis function that has support on 
        %the chosen element
        a_igr = 0;
        a_igz = 0;%in this one the sum over jj is empty
        a_ichu = 0;
        a_ichw = 0;
        a_ichudrchu = 0;
        a_ichwdzchu = 0;
        a_ichudrchw = 0;
        a_ichwdzchw = 0;
        ar_idrchu = 0;
        az_idzchu = 0;
        ar_idrchw = 0;
        az_idzchw = 0;
        % finding a_ii (this is multiplied by the Stokes number St)
        for pp = 1:n_Gaussian_Q
            a_igr       = a_igr ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *gr ...
                            *det_Je(pp);
            a_igz       = a_igz ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *gz ...
                            *det_Je(pp);
            a_ichu      = a_ichu ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *u_check(pp) ...
                            *det_Je(pp);
            a_ichw      = a_ichw ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *w_check(pp) ...
                            *det_Je(pp);
            a_ichudrchu = a_ichudrchu ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *u_check(pp) ...
                            *dr_u_check(pp) ...
                            *det_Je(pp);
            a_ichwdzchu = a_ichwdzchu ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *w_check(pp) ...
                            *dz_u_check(pp) ...
                            *det_Je(pp);
            a_ichudrchw = a_ichudrchw ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *u_check(pp) ...
                            *dr_w_check(pp) ...
                            *det_Je(pp);
            a_ichwdzchw = a_ichwdzchw ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *w_check(pp) ...
                            *dz_w_check(pp) ...
                            *det_Je(pp);
            ar_idrchu = ar_idrchu ...
                        + W_G(pp) ...
                          *(T{pp}(ii,:)*(z_e-min_z_e)) ...
                          *dr_u_check(pp);
            az_idzchu = az_idzchu ...
                        - W_G(pp) ...
                          *(T{pp}(ii,:)*(r_e-min_r_e)) ...
                          *dz_u_check(pp);
            ar_idrchw = ar_idrchw ...
                        + W_G(pp) ...
                          *(T{pp}(ii,:)*(z_e-min_z_e)) ...
                          *dr_w_check(pp);
            az_idzchw = az_idzchw ...
                        - W_G(pp) ...
                          *(T{pp}(ii,:)*(r_e-min_r_e)) ...
                          *dz_w_check(pp);
        end
        %Residual contributions
        Mr_near(l(ee,ii)) = Mr_near(l(ee,ii)) ...
                            + Re ...
                              *a_n ...
                              *A ...
                              *a_ichu ...
                            + 2 ...
                              *delta_t ...
                              *(- St ...
                                  *a_igr ...
                                + A ...
                                  *(  ar_idrchu ...
                                    + az_idzchu ...
                                   ) ...
                                + Re ...
                                  *A^2 ...
                                  *(  a_ichudrchu ...
                                    + a_ichwdzchu ...
                                   ) ...
                               ) ...
                              /3;
        Mz_near(l(ee,ii)) = Mz_near(l(ee,ii)) ...
                            + Re ...
                              *a_n ...
                              *A ...
                              *a_ichw ...
                            + 2 ...
                              *delta_t ...
                              *(- St ...
                                  *a_igz ... 
                                + A ...
                                  *(  ar_idrchw ... 
                                    + az_idzchw ... 
                                   ) ...   
                                + Re ...
                                  *A^2 ...
                                  *(  a_ichudrchw ...
                                    + a_ichwdzchw ...
                                   ) ...
                               ) ...
                              /3;                            
        for jj = 1:6 %compute product of basis function ii by the 
            %part of the solution that is supported on the element 
            %(for linear terms this is just the six hat functions 
            %on each node times its node value)
            azr_ij = 0;
            a_ijdzchu = 0;
            arr_ij = 0;
            azz_ij = 0;
            ar_ijchu = 0;
            az_ijchw = 0;
            a_ijdrchu = 0;
            a_ij = 0;
            arz_ij = 0;
            a_ijdrchw = 0;
            a_ijdzchw = 0;
            for pp = 1:n_Gaussian_Q
                arz_ij    = arz_ij ...
                            - W_G(pp) ...
                              *(T{pp}(ii,:)*(z_e-min_z_e)) ...
                              *(T{pp}(jj,:)*(r_e-min_r_e)) ...
                              /det_Je(pp);
                azr_ij    = azr_ij ...
                            - W_G(pp) ...
                              *(T{pp}(ii,:)*(r_e-min_r_e)) ...
                              *(T{pp}(jj,:)*(z_e-min_z_e)) ...
                              /det_Je(pp);
                a_ijdzchu = a_ijdzchu ...
                            + W_G(pp) ...
                              *phi_G(ii,pp) ...
                              *phi_G(jj,pp) ...
                              *dz_u_check(pp) ...
                              *det_Je(pp);
                arr_ij    = arr_ij ...
                            + W_G(pp) ...
                              *(T{pp}(ii,:)*(z_e-min_z_e)) ...
                              *(T{pp}(jj,:)*(z_e-min_z_e)) ...
                              /det_Je(pp);
                azz_ij    = azz_ij ...
                            + W_G(pp) ...
                              *(T{pp}(ii,:)*(r_e-min_r_e)) ...
                              *(T{pp}(jj,:)*(r_e-min_r_e)) ...
                              /det_Je(pp);
                ar_ijchu  = ar_ijchu ...
                            + W_G(pp) ...
                              *phi_G(ii,pp) ...
                              *(T{pp}(jj,:)*(z_e-min_z_e)) ...
                              *u_check(pp);
                az_ijchw  = az_ijchw ...
                            - W_G(pp) ...
                              *phi_G(ii,pp) ...
                              *(T{pp}(jj,:)*(r_e-min_r_e)) ...
                              *w_check(pp);
                a_ijdrchu = a_ijdrchu ...
                            + W_G(pp) ...
                              *phi_G(ii,pp) ...
                              *phi_G(jj,pp) ...
                              *dr_u_check(pp) ...
                              *det_Je(pp);
                a_ij      = a_ij ...
                            + W_G(pp) ...
                              *phi_G(ii,pp) ...
                              *phi_G(jj,pp) ...
                              *det_Je(pp); 
                a_ijdrchw = a_ijdrchw ...
                            + W_G(pp) ...
                              *phi_G(ii,pp) ...
                              *phi_G(jj,pp) ...
                              *dr_w_check(pp) ...
                              *det_Je(pp);
                a_ijdzchw = a_ijdzchw ...
                            + W_G(pp) ...
                              *phi_G(ii,pp) ...
                              *phi_G(jj,pp) ...
                              *dz_w_check(pp) ...
                              *det_Je(pp);
            end
            Abar_ij = 0;
            B_ij = 0;
            C_ij = 0;
            for kk = 1:6 %This second loop is needed because of 
                %the non-linearity of the convective term 
                ar_ikj = 0;
                az_ikj = 0;
                for pp = 1:n_Gaussian_Q
                    ar_ikj = ar_ikj ...
                             + W_G(pp) ...
                               *phi_G(ii,pp) ...
                               *phi_G(kk,pp) ...
                               *(T{pp}(jj,:)*(z_e-min_z_e));
                    az_ikj = az_ikj ...
                             - W_G(pp) ...
                               *phi_G(ii,pp) ...
                               *phi_G(kk,pp) ...
                               *(T{pp}(jj,:)*(r_e-min_r_e));
                end
                Abar_ij = Abar_ij ...
                          + ar_ikj ...
                            *u_bar(l(ee,kk)) ...
                          + az_ikj ...
                            *w_bar(l(ee,kk));
                B_ij    = B_ij ...
                          + ar_ikj ...
                            *(  a_n       *Nodes_rz(l(ee,kk),1) ...
                              - a_n_minus1*Nodes_rz_minus1(l(ee,kk),1) ...
                              + a_n_minus2*Nodes_rz_minus2(l(ee,kk),1) ...
                             );
                C_ij    = C_ij ...
                          + az_ikj ...
                            *(  a_n       *Nodes_rz(l(ee,kk),2) ...
                              - a_n_minus1*Nodes_rz_minus1(l(ee,kk),2) ...
                              + a_n_minus2*Nodes_rz_minus2(l(ee,kk),2) ...
                             );
            end
            %Residual contributions
            Mr_near(l(ee,ii)) ...
                = Mr_near(l(ee,ii)) ...
                  + 2 ...
                    *delta_t ...
                    *w_bar(l(ee,jj)) ...
                    *(  Re ...
                        *A ...
                        *a_ijdzchu ... + azr_ij ...
                     ) ...
                    /3 ...
                  + 2 ...
                    *delta_t ...
                    *u_bar(l(ee,jj)) ...
                    *(  arr_ij ... %(*2)
                      + azz_ij ...
                      + Re ...
                        *A ...
                        *(  ar_ijchu ...
                          + az_ijchw ...
                          + a_ijdrchu ...
                         ) ...
                     ) ...
                    /3 ...
                  + Re ...
                    *a_ij ...
                    *(  a_n       *u_bar(   l(ee,jj)) ...
                      - a_n_minus1*u_minus1(l(ee,jj)) ...
                      + a_n_minus2*u_minus2(l(ee,jj)) ...
                     ) ...
                  - Re ...
                    *A ...
                    *(  a_ijdrchu ...
                        *(  a_n       *Nodes_rz(       l(ee,jj),1) ...
                          - a_n_minus1*Nodes_rz_minus1(l(ee,jj),1) ...
                          + a_n_minus2*Nodes_rz_minus2(l(ee,jj),1) ...
                         ) ...
                      + a_ijdzchu ...
                        *(  a_n       *Nodes_rz(       l(ee,jj),2) ...
                          - a_n_minus1*Nodes_rz_minus1(l(ee,jj),2) ...
                          + a_n_minus2*Nodes_rz_minus2(l(ee,jj),2) ...
                         ) ...
                     ) ...
                  + Re ...
                    *u_bar(l(ee,jj)) ...
                    *(  2 ...
                        *delta_t ...
                        *Abar_ij ...
                        /3 ...
                      - B_ij ...
                      - C_ij ...
                     );
            Mz_near(l(ee,ii)) ...
                = Mz_near(l(ee,ii)) ...
                  + 2 ...
                    *delta_t ...
                    *u_bar(l(ee,jj)) ...
                    *(  Re ...
                        *A ...
                        *a_ijdrchw ... % + arz_ij ...
                     ) ...
                    /3 ...
                  + 2 ...
                    *delta_t ...
                    *w_bar(l(ee,jj)) ...
                    *(  arr_ij ...
                      + azz_ij ... %(*2)
                      + Re ...
                        *A ...
                        *(  ar_ijchu ...
                          + az_ijchw ...
                          + a_ijdzchw ...
                         ) ...
                     ) ...
                    /3 ...
                  + Re ...
                    *a_ij ...
                    *(  a_n       *w_bar(l(ee,jj)) ...
                      - a_n_minus1*w_minus1(l(ee,jj)) ...
                      + a_n_minus2*w_minus2(l(ee,jj)) ...
                     ) ...
                  - Re ...
                    *A ...
                    *(  a_ijdrchw ...
                        *(  a_n       *Nodes_rz(l(ee,jj),1) ...
                          - a_n_minus1*Nodes_rz_minus1(l(ee,jj),1) ...
                          + a_n_minus2*Nodes_rz_minus2(l(ee,jj),1) ...
                         ) ...
                      + a_ijdzchw ...
                        *(  a_n       *Nodes_rz(l(ee,jj),2) ...
                          - a_n_minus1*Nodes_rz_minus1(l(ee,jj),2) ...
                          + a_n_minus2*Nodes_rz_minus2(l(ee,jj),2) ...
                         ) ...
                     ) ...
                  + Re ...
                    *w_bar(l(ee,jj)) ...
                    *(  2 ...
                        *delta_t ...
                        *Abar_ij ...
                        /3 ...
                      - B_ij ...
                      - C_ij ...
                     );
        end
        for jj = 1:3
            br_ji = 0;
            bz_ji = 0;
            for pp = 1:n_Gaussian_Q
                br_ji = br_ji ...
                        + W_G(pp) ...
                          *psi_star_G(jj,pp) ...
                          *(T{pp}(ii,:)*(z_e-min_z_e));
                bz_ji = bz_ji ...
                        - W_G(pp) ...
                          *psi_star_G(jj,pp) ...
                          *(T{pp}(ii,:)*(r_e-min_r_e));
            end
            %Residual contribution
            Mr_near(l(ee,ii)) = Mr_near(l(ee,ii)) ...
                                - 2 ...
                                  *delta_t ...
                                  *br_ji ...
                                  *p(lp(ee,jj)) ...
                                  /3;
            Mz_near(l(ee,ii)) = Mz_near(l(ee,ii)) ...
                                - 2 ...
                                  *delta_t ...
                                  *bz_ji ...
                                  *p(lp(ee,jj)) ...
                                  /3;
            C_near(lp(ee,jj)) = C_near(lp(ee,jj)) ...
                                - br_ji ...
                                  *u_bar(l(ee,ii)) ...
                                - bz_ji ...
                                  *w_bar(l(ee,ii));
        end
    end
end
%Adding near field triangular element contributions
for ee = n_el_sing+1:n_el_near %go through every element
    %find the r and z coordinates of the element nodes
    r_e = Nodes_rz(l(ee,:),1);
    z_e = Nodes_rz(l(ee,:),2);
    min_r_e = min(r_e);
    min_z_e = min(z_e);
    for pp = 1:n_Gaussian_Q
        % find the determinant of the Jacobian of the isoparametric 
        %map at each Gaussian quadrature point
        det_Je(pp) = (r_e'-min_r_e)*T{pp}*(z_e-min_z_e);
        %Data for eigensolution
        r_pp = (r_e'-Nodes_rz(1,1))*phi_G(:,pp);
        z_pp = (z_e'-Nodes_rz(1,2))*phi_G(:,pp);
        theta_pol = atan2(z_pp,r_pp);
        phi_pp = pi - theta_m - theta_pol;
        theta_pp = lambda_eig*phi_pp;
        c_theta_pp = cos(theta_pp);
        s_theta_pp = sin(theta_pp);
        divider = max(abs(r_pp),abs(z_pp));
        r_pp_div = r_pp/divider;
        z_pp_div = z_pp/divider;
        rho_l = sqrt(r_pp_div^2+z_pp_div^2);
        rho_l = rho_l*divider;
        rho_l_minus2_pp = rho_l^(lambda_eig-2);
        rho_l_minus4_pp = rho_l^(lambda_eig-4);
        % Find the values of u_check at the Gaussian sampling points
        u_check(pp) = check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                    rho_l_minus2_pp,c_theta_pp, ...
                                    s_theta_pp);
        % Find the values of w_check at the Gaussian sampling points
        w_check(pp) = check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                    rho_l_minus2_pp,c_theta_pp, ...
                                    s_theta_pp);
        % Find the values of dr_u_check at the Gaussian sampling points
        dr_u_check(pp) = dr_check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dz_u_check at the Gaussian sampling points
        dz_u_check(pp) = dz_check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dr_w_check at the Gaussian sampling points
        dr_w_check(pp) = dr_check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dz_w_check at the Gaussian sampling points
        dz_w_check(pp) = dz_check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
    end
    for ii = 1:6 %select each basis function that has support on 
        %the chosen element
        a_igr = 0;
        a_igz = 0;%in this one the sum over jj is empty
        a_ichu = 0;
        a_ichw = 0;
        a_ichudrchu = 0;
        a_ichwdzchu = 0;
        a_ichudrchw = 0;
        a_ichwdzchw = 0;
        ar_idrchu = 0;
        az_idzchu = 0;
        ar_idrchw = 0;
        az_idzchw = 0;
        % finding a_ii (this is multiplied by the Stokes number St)
        for pp = 1:n_Gaussian_Q
            a_igr       = a_igr ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *gr ...
                            *det_Je(pp);
            a_igz       = a_igz ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *gz ...
                            *det_Je(pp);
            a_ichu      = a_ichu ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *u_check(pp) ...
                            *det_Je(pp);
            a_ichw      = a_ichw ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *w_check(pp) ...
                            *det_Je(pp);
            a_ichudrchu = a_ichudrchu ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *u_check(pp) ...
                            *dr_u_check(pp) ...
                            *det_Je(pp);
            a_ichwdzchu = a_ichwdzchu ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *w_check(pp) ...
                            *dz_u_check(pp) ...
                            *det_Je(pp);
            a_ichudrchw = a_ichudrchw ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *u_check(pp) ...
                            *dr_w_check(pp) ...
                            *det_Je(pp);
            a_ichwdzchw = a_ichwdzchw ...
                          + W_G(pp) ...
                            *phi_G(ii,pp) ...
                            *w_check(pp) ...
                            *dz_w_check(pp) ...
                            *det_Je(pp);
            ar_idrchu = ar_idrchu ...
                        + W_G(pp) ...
                          *(T{pp}(ii,:)*(z_e-min_z_e)) ...
                          *dr_u_check(pp);
            az_idzchu = az_idzchu ...
                        - W_G(pp) ...
                          *(T{pp}(ii,:)*(r_e-min_r_e)) ...
                          *dz_u_check(pp);
            ar_idrchw = ar_idrchw ...
                        + W_G(pp) ...
                          *(T{pp}(ii,:)*(z_e-min_z_e)) ...
                          *dr_w_check(pp);
            az_idzchw = az_idzchw ...
                        - W_G(pp) ...
                          *(T{pp}(ii,:)*(r_e-min_r_e)) ...
                          *dz_w_check(pp);
        end
        %Residual contributions
        Mr_near(l(ee,ii)) = Mr_near(l(ee,ii)) ...
                            + Re ...
                              *a_n ...
                              *A ...
                              *a_ichu ...
                            + 2 ...
                              *delta_t ...
                              *(- St ...
                                  *a_igr ...
                                + A ...
                                  *(  ar_idrchu ...
                                    + az_idzchu ...
                                   ) ...    
                                + Re ...
                                  *A^2 ...
                                  *(  a_ichudrchu ...
                                    + a_ichwdzchu ...
                                   ) ...
                               ) ...
                              /3;
        Mz_near(l(ee,ii)) = Mz_near(l(ee,ii)) ...
                            + Re ...
                              *a_n ...
                              *A ...
                              *a_ichw ...
                            + 2 ...
                              *delta_t ...
                              *(- St ...
                                  *a_igz ...
                                + A ...
                                  *(  ar_idrchw ...
                                    + az_idzchw ...
                                   ) ...
                                + Re ...
                                  *A^2 ...
                                  *(  a_ichudrchw ...
                                    + a_ichwdzchw ...
                                   ) ...
                               ) ...
                              /3;  
        for jj = 1:6 %compute product of basis function ii by the 
            %part of the solution that is supported on the element 
            %(for linear terms this is just the six hat functions 
            %on each node times its node value)
            azr_ij = 0;
            a_ijdzchu = 0;
            arr_ij = 0;
            azz_ij = 0;
            ar_ijchu = 0;
            az_ijchw = 0;
            a_ijdrchu = 0;
            a_ij = 0;
            arz_ij = 0;
            a_ijdrchw = 0;
            a_ijdzchw = 0;
            for pp = 1:n_Gaussian_Q
                arz_ij    = arz_ij    - W_G(pp) ...
                                        *(T{pp}(ii,:)*(z_e-min_z_e)) ...
                                        *(T{pp}(jj,:)*(r_e-min_r_e)) ...
                                        /det_Je(pp);
                azr_ij    = azr_ij    - W_G(pp) ...
                                        *(T{pp}(ii,:)*(r_e-min_r_e)) ...
                                        *(T{pp}(jj,:)*(z_e-min_z_e)) ...
                                        /det_Je(pp);
                a_ijdzchu = a_ijdzchu + W_G(pp) ...
                                        *phi_G(ii,pp) ...
                                        *phi_G(jj,pp) ...
                                        *dz_u_check(pp) ...
                                        *det_Je(pp);
                arr_ij    = arr_ij    + W_G(pp) ...
                                        *(T{pp}(ii,:)*(z_e-min_z_e)) ...
                                        *(T{pp}(jj,:)*(z_e-min_z_e)) ...
                                        /det_Je(pp);
                azz_ij    = azz_ij    + W_G(pp) ...
                                        *(T{pp}(ii,:)*(r_e-min_r_e)) ...
                                        *(T{pp}(jj,:)*(r_e-min_r_e)) ...
                                        /det_Je(pp);
                ar_ijchu  = ar_ijchu  + W_G(pp) ...
                                        *phi_G(ii,pp) ...
                                        *(T{pp}(jj,:)*(z_e-min_z_e)) ...
                                        *u_check(pp);
                az_ijchw  = az_ijchw  - W_G(pp) ...
                                        *phi_G(ii,pp) ...
                                        *(T{pp}(jj,:)*(r_e-min_r_e)) ...
                                        *w_check(pp);
                a_ijdrchu = a_ijdrchu + W_G(pp) ...
                                        *phi_G(ii,pp) ...
                                        *phi_G(jj,pp) ...
                                        *dr_u_check(pp) ...
                                        *det_Je(pp);
                a_ij      = a_ij      + W_G(pp) ...
                                        *phi_G(ii,pp) ...
                                        *phi_G(jj,pp) ...
                                        *det_Je(pp);
                a_ijdrchw = a_ijdrchw + W_G(pp) ...
                                        *phi_G(ii,pp) ...
                                        *phi_G(jj,pp) ...
                                        *dr_w_check(pp) ...
                                        *det_Je(pp);
                a_ijdzchw = a_ijdzchw + W_G(pp) ...
                                        *phi_G(ii,pp) ...
                                        *phi_G(jj,pp) ...
                                        *dz_w_check(pp) ...
                                        *det_Je(pp);
            end
            Abar_ij = 0;
            B_ij = 0;
            C_ij = 0;
            for kk = 1:6 %This second loop is needed because of 
                %the non-linearity of the convective term 
                ar_ikj = 0;
                az_ikj = 0;
                for pp = 1:n_Gaussian_Q
                    ar_ikj = ar_ikj + W_G(pp) ...
                                      *phi_G(ii,pp) ...
                                      *phi_G(kk,pp) ...
                                      *(T{pp}(jj,:)*(z_e-min_z_e));
                    az_ikj = az_ikj - W_G(pp) ...
                                      *phi_G(ii,pp) ...
                                      *phi_G(kk,pp) ...
                                      *(T{pp}(jj,:)*(r_e-min_r_e));
                end
                Abar_ij      = Abar_ij ...
                               + ar_ikj ...
                                 *u_bar(l(ee,kk)) ...
                               + az_ikj ...
                                 *w_bar(l(ee,kk));
                B_ij        = B_ij ...
                              + ar_ikj ...
                                *(  a_n       *Nodes_rz(l(ee,kk),1) ...
                                  - a_n_minus1*Nodes_rz_minus1(l(ee,kk),1) ...
                                  + a_n_minus2*Nodes_rz_minus2(l(ee,kk),1) ...
                                 );
                C_ij        = C_ij ...
                              + az_ikj ...
                                *(  a_n       *Nodes_rz(l(ee,kk),2) ...
                                  - a_n_minus1*Nodes_rz_minus1(l(ee,kk),2) ...
                                  + a_n_minus2*Nodes_rz_minus2(l(ee,kk),2) ...
                                 );
            end
            %Residual contributions
            Mr_near(l(ee,ii)) ...
                = Mr_near(l(ee,ii)) ...
                  + 2 ...
                    *delta_t ...
                    *w_bar(l(ee,jj)) ...
                    *(  Re ...
                        *A ...
                        *a_ijdzchu ... % + azr_ij ...
                     ) ...
                    /3 ...
                  + 2 ...
                    *delta_t ...
                    *u_bar(l(ee,jj)) ...
                    *(  arr_ij ... % (*2)
                      + azz_ij ...
                      + Re ...
                        *A ...
                        *(  ar_ijchu ...
                          + az_ijchw ...
                          + a_ijdrchu ...
                         ) ...
                     ) ...
                    /3 ...
                  + Re ...
                    *a_ij ...
                    *(  a_n       *u_bar(l(ee,jj)) ...
                      - a_n_minus1*u_minus1(l(ee,jj)) ...
                      + a_n_minus2*u_minus2(l(ee,jj)) ...
                          ) ...
                  - Re ...
                    *A ...
                    *(  a_ijdrchu ...
                        *(  a_n       *Nodes_rz(l(ee,jj),1) ...
                          - a_n_minus1*Nodes_rz_minus1(l(ee,jj),1) ...
                          + a_n_minus2*Nodes_rz_minus2(l(ee,jj),1) ...
                         ) ...
                      + a_ijdzchu ...
                        *(  a_n       *Nodes_rz(l(ee,jj),2) ...
                          - a_n_minus1*Nodes_rz_minus1(l(ee,jj),2) ...
                          + a_n_minus2*Nodes_rz_minus2(l(ee,jj),2) ...
                         ) ...
                     ) ...
                  + Re ...
                    *u_bar(l(ee,jj)) ...
                    *(  2 ...
                        *delta_t ...
                        *Abar_ij ...
                        /3 ...
                      - B_ij ...
                      - C_ij ...
                     );
            Mz_near(l(ee,ii)) ...
                = Mz_near(l(ee,ii)) ...
                  + 2 ...
                    *delta_t ...
                    *u_bar(l(ee,jj)) ...
                    *(  Re ...
                        *A ...
                        *a_ijdrchw ... % + arz_ij ...
                     ) ...
                    /3 ...
                  + 2 ...
                    *delta_t ...
                    *w_bar(l(ee,jj)) ...
                    *(  arr_ij ...
                      + azz_ij ... % (*2)
                      + Re ...
                        *A ...
                        *(  ar_ijchu ...
                          + az_ijchw ...
                          + a_ijdzchw ...
                         ) ...
                     ) ...
                    /3 ...
                  + Re ...
                    *a_ij ...
                    *(  a_n       *w_bar(l(ee,jj)) ...
                      - a_n_minus1*w_minus1(l(ee,jj)) ...
                      + a_n_minus2*w_minus2(l(ee,jj)) ...
                     ) ...
                  - Re ...
                    *A ...
                    *(  a_ijdrchw ...
                        *(  a_n       *Nodes_rz(l(ee,jj),1) ...
                          - a_n_minus1*Nodes_rz_minus1(l(ee,jj),1) ...
                          + a_n_minus2*Nodes_rz_minus2(l(ee,jj),1) ...
                         ) ...
                      + a_ijdzchw ...
                        *(  a_n       *Nodes_rz(l(ee,jj),2) ...
                          - a_n_minus1*Nodes_rz_minus1(l(ee,jj),2) ...
                          + a_n_minus2*Nodes_rz_minus2(l(ee,jj),2) ...
                         ) ...
                     ) ...
                  + Re ...
                    *w_bar(l(ee,jj)) ...
                    *(  2 ...
                        *delta_t ...
                        *Abar_ij ...
                        /3 ...
                      - B_ij ...
                      - C_ij ...
                     );
        end
        for jj = 1:3
            br_ji = 0;
            bz_ji = 0;
            for pp = 1:n_Gaussian_Q
                br_ji = br_ji ...
                        + W_G(pp) ...
                          *psi_G(jj,pp) ...
                          *(T{pp}(ii,:)*(z_e-min_z_e));
                bz_ji = bz_ji ...
                        - W_G(pp) ...
                          *psi_G(jj,pp) ...
                          *(T{pp}(ii,:)*(r_e-min_r_e));
            end
            %Residual contribution
            Mr_near(l(ee,ii)) = Mr_near(l(ee,ii)) ...
                                - 2 ...
                                  *delta_t ...
                                  *br_ji ...
                                  *p(lp(ee,jj)) ...
                                  /3;
            Mz_near(l(ee,ii)) = Mz_near(l(ee,ii)) ...
                                - 2 ...
                                  *delta_t ...
                                  *bz_ji ...
                                  *p(lp(ee,jj)) ...
                                  /3;
            C_near(lp(ee,jj)) = C_near(lp(ee,jj)) ...
                                - br_ji ...
                                  *u_bar(l(ee,ii)) ...
                                - bz_ji ...
                                  *w_bar(l(ee,ii));
        end
    end
end

%Adding the free-surface boundary contributions to the momentum and 
%KBC equations in the near field
for ee = 1:n1_el_near
    r_le = Nodes_rz(l_1(ee,:),1);
    z_le = Nodes_rz(l_1(ee,:),2);
    min_r_le = min(r_le);
    min_z_le = min(z_le);
    r_e = Nodes_rz(l(LE_to_TE_1(ee),:),1);
    z_e = Nodes_rz(l(LE_to_TE_1(ee),:),2);
    min_r_e = min(r_e);
    min_z_e = min(z_e);
    for pp = 1:n_lGaussian_Q
        %find r' and z' (derivatives with respect to the master element 
        %parametrisation) at each Gaussian quadrature point
        r_prime_lGaussian(pp) = (phi1_xi_lG(:,pp)')*(r_le-min_r_le);
        z_prime_lGaussian(pp) = (phi1_xi_lG(:,pp)')*(z_le-min_z_le); 
        normaliser = max(abs(r_prime_lGaussian(pp)), ...
                         abs(z_prime_lGaussian(pp)));
        r_prime_lGaussian_aux = r_prime_lGaussian(pp)/normaliser;
        z_prime_lGaussian_aux = z_prime_lGaussian(pp)/normaliser;
        %find the determinant of the Jacobian of the isoparametric 
        %map at each Gaussian quadrature point
        det_Jle(pp) = sqrt(  r_prime_lGaussian_aux^2 ...
                           + z_prime_lGaussian_aux^2 ...
                          ) ...
                      *normaliser;
        det_Je(pp) = (r_e'-min_r_e)*Tmat1{pp}*(z_e-min_z_e);
        %Data for eigensolution
        r_pp = (r_le'-Nodes_rz(1,1))*phi1_lG(:,pp);
        z_pp = (z_le'-Nodes_rz(1,2))*phi1_lG(:,pp);
        theta_pol = atan2(z_pp,r_pp);
        phi_pp = pi - theta_m - theta_pol;
        theta_pp = lambda_eig*phi_pp;
        c_theta_pp = cos(theta_pp);
        s_theta_pp = sin(theta_pp);
        divider = max(abs(r_pp),abs(z_pp));
        r_pp_div = r_pp/divider;
        z_pp_div = z_pp/divider;
        rho_l = sqrt(r_pp_div^2+z_pp_div^2);
        rho_l = rho_l*divider;
        rho_l_minus2_pp = rho_l^(lambda_eig-2);
        rho_l_minus4_pp = rho_l^(lambda_eig-4);
        % Find the values of u_check at the Gaussian sampling points
        u_check(pp) = check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                    rho_l_minus2_pp,c_theta_pp, ...
                                    s_theta_pp);
        % Find the values of w_check at the Gaussian sampling points
        w_check(pp) = check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                    rho_l_minus2_pp,c_theta_pp, ...
                                    s_theta_pp);
        % Find the values of dr_u_check at the Gaussian sampling points
        dr_u_check(pp) = dr_check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dz_u_check at the Gaussian sampling points
        dz_u_check(pp) = dz_check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dr_w_check at the Gaussian sampling points
        dr_w_check(pp) = dr_check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dz_w_check at the Gaussian sampling points
        dz_w_check(pp) = dz_check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
    end
    for ii = 1:3 %looping over line-element nodes
        %to find contribution to each equation
        %Variables needed to find Mr_i
        c_inrdrchu = 0;   
        c_inzdrchw = 0;
        %Variables needed to find Mz_i
        c_inzdzchw = 0; 
        c_inrdzchu = 0;
        %Variables needed for the S1 reiduals
        c_itrchu = 0;
        c_itzchw = 0;
        %Variables needed for E1 residuals
        c_inrchu = 0;
        c_inzchw = 0;
        c_i = 0;
        for pp = 1:n_lGaussian_Q
            %Variables needed for Mr
            c_inrdrchu = c_inrdrchu ...
                         - alpha_1 ...
                           *W_lG(pp) ...
                           *phi1_lG(ii,pp) ...
                           *z_prime_lGaussian(pp) ...
                           *dr_u_check(pp);
            c_inzdrchw = c_inzdrchw ...
                         + alpha_1 ...
                           *W_lG(pp) ...
                           *phi1_lG(ii,pp) ...
                           *r_prime_lGaussian(pp) ...
                           *dr_w_check(pp);                  
            %Variables needed for Mz           
            c_inzdzchw = c_inzdzchw ...
                         + alpha_1 ...
                           *W_lG(pp) ...
                           *phi1_lG(ii,pp) ...
                           *r_prime_lGaussian(pp) ...
                           *dz_w_check(pp);
            c_inrdzchu = c_inrdzchu ...
                         - alpha_1 ...
                           *W_lG(pp) ...
                           *phi1_lG(ii,pp) ...
                           *z_prime_lGaussian(pp) ...
                           *dz_u_check(pp);
            %Variables needed for S1
            c_itrchu = c_itrchu ...
                       + W_lG(pp) ...
                         *phi1_lG(ii,pp) ...
                         *r_prime_lGaussian(pp) ...
                         *u_check(pp);
            c_itzchw = c_itzchw ...
                       + W_lG(pp) ...
                         *phi1_lG(ii,pp) ...
                         *z_prime_lGaussian(pp) ...
                         *w_check(pp);
            %Variables needed for E1
            c_inrchu   = c_inrchu ...
                         - alpha_1 ...
                           *W_lG(pp) ...
                           *phi1_lG(ii,pp) ...
                           *z_prime_lGaussian(pp) ...
                           *u_check(pp);
            c_inzchw   = c_inzchw ...
                         + alpha_1 ...
                           *W_lG(pp) ...
                           *phi1_lG(ii,pp) ...
                           *r_prime_lGaussian(pp) ...
                           *w_check(pp);
            c_i = c_i ...
                  + W_lG(pp) ...
                    *phi1_lG(ii,pp) ...
                    *det_Jle(pp);
        end
        Mr_near(l_1(ee,ii)) = Mr_near(l_1(ee,ii)) ...
                              + 2 ...
                                *delta_t ...
                                *A ...
                                *(- c_inrdrchu ... 
                                  - c_inzdrchw ...
                                 ) ...
                                /3;
        Mz_near(l_1(ee,ii)) = Mz_near(l_1(ee,ii)) ...
                              + 2 ...
                                *delta_t ...
                                *A ...
                                *(- c_inzdzchw ... 
                                  - c_inrdzchu ...
                                 ) ...
                                /3;
        S1_near(l1_1(ee,ii)) ...
            = S1_near(l1_1(ee,ii)) ...
              - A ...
                *(  c_itrchu ...
                  + c_itzchw ...
                 );
        E1_near(l1_1(ee,ii)) ...
            = E1_near(l1_1(ee,ii)) ...
              + 2 ...
                *delta_t ...
                *A ...
                *(  c_inrchu ...
                  + c_inzchw ...
                 ) ...
                /3;
%               + Fg ...
%                 *Dg ...
%                 *c_i ...
        D1_near(l1_1(ee,ii)) ...
            = D1_near(l1_1(ee,ii)) ...
              - 2 ...
                *delta_t ...
                *Dg ...
                *c_i ...
                /3;
        for jj = 1:3 %looping over line element nodes to find pair-wise
            %inner product of basis functions
            cs_jitr = 0;
            cs_jitz = 0;
            %Variables needed for Mr
            c_ijnr = 0;
            %Variables needed for Mz
            c_ijnz = 0;
            %Variables needed for S1
            c_ijtr = 0;
            c_ijtz = 0;
            cs_ji = 0;
            %Variables needed for E1
            c_ij = 0;
            for pp = 1:n_lGaussian_Q
                cs_jitr = cs_jitr ...
                          + W_lG(pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_xi_lG(ii,pp) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                cs_jitz = cs_jitz ...
                          + W_lG(pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_xi_lG(ii,pp) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                %Variables needed for Mr
                c_ijnr  = c_ijnr  ...
                          - alpha_1 ...
                            *W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *phi1_lG(jj,pp) ...
                            *z_prime_lGaussian(pp);
                %Variables needed for Mz
                c_ijnz  = c_ijnz  ...
                          + alpha_1 ...
                            *W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *phi1_lG(jj,pp) ...
                            *r_prime_lGaussian(pp);
                %Variables needed for S1
                c_ijtr = c_ijtr ...
                         + W_lG(pp) ...
                           *phi1_lG(ii,pp) ...
                           *phi1_lG(jj,pp) ...
                           *r_prime_lGaussian(pp);
                c_ijtz = c_ijtz ...
                         + W_lG(pp) ...
                           *phi1_lG(ii,pp) ...
                           *phi1_lG(jj,pp) ...
                           *z_prime_lGaussian(pp);
                cs_ji = cs_ji ...
                        + W_lG(pp) ...
                          *phi1_lG(jj,pp) ...
                          *phi1_xi_lG(ii,pp);
                %Variables needed for E1
                c_ij = c_ij ...
                       + W_lG(pp) ...
                         *phi1_lG(ii,pp) ...
                         *phi1_lG(jj,pp) ...
                         *det_Jle(pp);
            end
            As1_ij = 0;
            Bs1_ij = 0;
            Cs1_ij = 0;
            Ds1_ij = 0;
            Es1_ij = 0;
            for kk = 1:3
                cs_jkitr = 0;
                cs_jkitz = 0;
                cs_ijktr = 0;
                cs_ijktz = 0;
                for pp = 1:n_lGaussian_Q
                    cs_jkitr ...
                        = cs_jkitr ...
                          + W_lG(pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_lG(kk,pp) ...
                            *phi1_xi_lG(ii,pp) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                    cs_jkitz ...
                        = cs_jkitz ...
                          + W_lG(pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_lG(kk,pp) ...
                            *phi1_xi_lG(ii,pp) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                    cs_ijktr ...
                        = cs_ijktr ...
                          + W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_xi_lG(kk,pp) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                    cs_ijktz ...
                        = cs_ijktz ...
                          + W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_xi_lG(kk,pp) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                end
                As1_ij ...
                    = As1_ij ...
                      + us1(l1_1(ee,kk)) ...
                        *cs_jkitr ...
                      + ws1(l1_1(ee,kk)) ...
                        *cs_jkitz;
                Bs1_ij ...
                    = Bs1_ij ...
                      + cs_jkitr ...
                        *(  a_n       *Nodes_rz(l_1(ee,kk),1) ...
                          - a_n_minus1*Nodes_rz_minus1(l_1(ee,kk),1) ...
                          + a_n_minus2*Nodes_rz_minus2(l_1(ee,kk),1) ...
                         );
                Cs1_ij ...
                    = Cs1_ij ...
                      + cs_jkitz ...
                        *(  a_n       *Nodes_rz(l_1(ee,kk),2) ...
                          - a_n_minus1*Nodes_rz_minus1(l_1(ee,kk),2) ...
                          + a_n_minus2*Nodes_rz_minus2(l_1(ee,kk),2) ...
                         );
                Ds1_ij ...
                    = Ds1_ij ...
                      + cs_ijktr ...
                        *(  a_n       *Nodes_rz(l_1(ee,kk),1) ...
                          - a_n_minus1*Nodes_rz_minus1(l_1(ee,kk),1) ...
                          + a_n_minus2*Nodes_rz_minus2(l_1(ee,kk),1) ...
                         );
                Es1_ij ...
                    = Es1_ij ...
                      + cs_ijktz ...
                        *(  a_n       *Nodes_rz(l_1(ee,kk),2) ...
                          - a_n_minus1*Nodes_rz_minus1(l_1(ee,kk),2) ...
                          + a_n_minus2*Nodes_rz_minus2(l_1(ee,kk),2) ...
                         );
            end
            %Residual contributions
            Mr_near(l_1(ee,ii)) ...
                = Mr_near(l_1(ee,ii)) ...
                  + 2 ...
                    *delta_t ...
                    *(- pg(l1_1(ee,jj)) ...
                        *c_ijnr ... 
                      + sigma1(l1_1(ee,jj)) ...
                        *cs_jitr ...
                        /Ca ...
                     ) ...
                    /3;
            Mz_near(l_1(ee,ii)) ...
                = Mz_near(l_1(ee,ii)) ...
                  + 2 ...
                    *delta_t ...
                    *(- pg(l1_1(ee,jj)) ...
                        *c_ijnz ... 
                      + sigma1(l1_1(ee,jj)) ...
                        *cs_jitz ...
                        /Ca ...
                     ) ...
                    /3;
            S1_near(l1_1(ee,ii)) ...
                = S1_near(l1_1(ee,ii)) ...
                  + c_ijtr ...
                    *(  us1(l1_1(ee,jj)) ...
                      - u_bar(l_1(ee,jj)) ...
                     ) ...
                  + c_ijtz ...
                    *(  ws1(l1_1(ee,jj)) ...
                      - w_bar(l_1(ee,jj)) ...
                     ) ...
                  + (1+4*Eg*Bg) ...
                    *sigma1(l1_1(ee,jj)) ...
                    *cs_ji ...
                    /(4*Bg);     
            K_near(l1_1(ee,ii)) ...
                = K_near(l1_1(ee,ii)) ...
                  + 2 ...
                    *delta_t ...
                    *(  c_ijnr ...
                        *us1(l1_1(ee,jj)) ...
                      + c_ijnz ...
                        *ws1(l1_1(ee,jj)) ...
                     ) ...
                    /3 ...
                  - c_ijnr ...
                    *(  a_n       *Nodes_rz(l_1(ee,jj),1) ...
                      - a_n_minus1*Nodes_rz_minus1(l_1(ee,jj),1) ...
                      + a_n_minus2*Nodes_rz_minus2(l_1(ee,jj),1) ...
                     ) ...
                  - c_ijnz ...
                    *(  a_n       *Nodes_rz(l_1(ee,jj),2) ...
                      - a_n_minus1*Nodes_rz_minus1(l_1(ee,jj),2) ...
                      + a_n_minus2*Nodes_rz_minus2(l_1(ee,jj),2) ...
                     );
            E1_near(l1_1(ee,ii)) ...
                = E1_near(l1_1(ee,ii)) ...
                  + 2 ...
                    *delta_t ...
                    *(  c_ijnr ...
                        *(  u_bar(l_1(ee,jj)) ...
                          - us1( l1_1(ee,jj)) ...
                         ) ...
                      + c_ijnz ...
                        *(  w_bar(l_1(ee,jj)) ...
                          - ws1( l1_1(ee,jj)) ...
                         ) ...
                     ) ...
                    /3 ...
                  + c_ij ...
                    *Lg ...
                    *(  a_n       *rhos1(l1_1(ee,jj)) ...
                      - a_n_minus1*rhos1_minus1(l1_1(ee,jj)) ...
                      + a_n_minus2*rhos1_minus2(l1_1(ee,jj)) ...
                     ) ...
                  + Lg ...
                    *rhos1(l1_1(ee,jj)) ...
                    *(- 2 ...
                        *delta_t ...
                        *As1_ij ...
                        /3 ...
                      + Bs1_ij ...
                      + Cs1_ij ...
                      + Ds1_ij ...
                      + Es1_ij ...
                     );
%                   - Fg ...
%                     *rhos1(l1_1(ee,jj)) ...
%                     *c_ij;
            D1_near(l1_1(ee,ii)) ...
                = D1_near(l1_1(ee,ii)) ...
                  + c_ij ...
                    *(  2 ...
                        *delta_t ...
                        *rhos1(l1_1(ee,jj)) ...
                        /3 ...
                      + Tg ...
                        *(  a_n       *rhos1(l1_1(ee,jj)) ...
                          - a_n_minus1*rhos1_minus1(l1_1(ee,jj)) ...
                          + a_n_minus2*rhos1_minus2(l1_1(ee,jj)) ...
                         ) ...
                     ) ...
                  + Tg ...
                    *rhos1(l1_1(ee,jj)) ...
                    *(- 2 ...
                        *delta_t ...
                        *As1_ij ...
                        /3 ...
                      + Bs1_ij ...
                      + Cs1_ij ...
                      + Ds1_ij ...
                      + Es1_ij ...
                     );
        end
        for jj = 1:6
            cr_ijnr = 0;
            cr_ijnz = 0;
            cz_ijnr = 0;
            cz_ijnz = 0;
            for pp = 1:n_lGaussian_Q
                cr_ijnr = cr_ijnr ...
                          - alpha_1 ...
                            *W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *Tmat1{pp}(jj,:)*(z_e-min_z_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                cr_ijnz = cr_ijnz ...
                          + alpha_1 ...
                            *W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *Tmat1{pp}(jj,:)*(z_e-min_z_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
                cz_ijnr = cz_ijnr ...
                          + alpha_1 ...
                            *W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *Tmat1{pp}(jj,:)*(r_e-min_r_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                cz_ijnz = cz_ijnz ...
                          - alpha_1 ...
                            *W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *Tmat1{pp}(jj,:)*(r_e-min_r_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
            end
            Mr_near(l_1(ee,ii)) ...
                = Mr_near(l_1(ee,ii)) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_bar(l(LE_to_TE_1(ee),jj)) ...
                        *cr_ijnr ...
                      + w_bar(l(LE_to_TE_1(ee),jj)) ...
                        *cr_ijnz ...
                     ) ...
                    /3;
            Mz_near(l_1(ee,ii)) ...
                = Mz_near(l_1(ee,ii)) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_bar(l(LE_to_TE_1(ee),jj)) ...
                        *cz_ijnr ...
                      + w_bar(l(LE_to_TE_1(ee),jj)) ...
                        *cz_ijnz ...
                     ) ...
                    /3;
        end
    end
end

%Contact line contributions
Mr_near(contact_line) = Mr_near(contact_line) ... 
                        + 2 ...
                          *delta_t ...
                          *sigma1(c1) ...
                          *m1_r ...
                          /(3*Ca);
Mz_near(contact_line) = Mz_near(contact_line) ...
                        + 2 ...
                          *delta_t ...
                          *sigma1(c1) ...
                          *m1_z ...
                          /(3*Ca);

%Contact line contributions for slip-between-free-surface-and-solid
%equation
S1_near(c1) = S1_near(c1) ...
              + (1+4*Eg*Bg) ...
                *sigma1(c1) ...
                /(4*Bg);

%Contact line contributions for mass exchange on
%the free surface
E1_near(c1) = E1_near(c1) ...
              + 2 ...
                *delta_t ...
                *Lg ...
                *rhos2(c2) ...
                *(  us2(c2) ...
                    *m2_r ...
                  + ws2(c2) ...
                    *m2_z ...
                 ) ...
                /3 ...
             - Lg ...
               *rhos2(c2) ...
               *(  m2_r ...
                   *(  a_n       *Nodes_rz(contact_line,1) ...
                     - a_n_minus1*Nodes_rz_minus1(contact_line,1) ...
                     + a_n_minus2*Nodes_rz_minus2(contact_line,1) ...
                    ) ...
                 + m2_z ...
                   *(  a_n       *Nodes_rz(contact_line,2) ...
                     - a_n_minus1*Nodes_rz_minus1(contact_line,2) ...
                     + a_n_minus2*Nodes_rz_minus2(contact_line,2) ...
                    ) ...
                );
%Contact line contributions for density transport on
%the free surface
D1_near(c1) = D1_near(c1) ...
              + 2 ...
                *delta_t ...
                *Tg ...
                *rhos2(c2) ...
                *(  us2(c2) ...
                    *m2_r ...
                  + ws2(c2) ...
                    *m2_z ...
                 ) ...
                /3 ...
             - Tg ...
               *rhos2(c2) ...
               *(  m2_r ...
                   *(  a_n       *Nodes_rz(contact_line,1) ...
                     - a_n_minus1*Nodes_rz_minus1(contact_line,1) ...
                     + a_n_minus2*Nodes_rz_minus2(contact_line,1) ...
                    ) ...
                 + m2_z ...
                   *(  a_n       *Nodes_rz(contact_line,2) ...
                     - a_n_minus1*Nodes_rz_minus1(contact_line,2) ...
                     + a_n_minus2*Nodes_rz_minus2(contact_line,2) ...
                    ) ...
                );

%Strong form of the state equation on the free surface
for ii = 1:n_spines_near
    T1_near(ii) = sigma1(ii)+Cg*(rhos1(ii)-1);
end

% Adding the solid-surface boundary contributions to 
%the momentum and impermeability equations
for ee = 1:n2_el_near%looping over elements
    r_le = Nodes_rz(l_2(ee,:),1);
    z_le = Nodes_rz(l_2(ee,:),2);
    min_r_le = min(r_le);
    min_z_le = min(z_le);
    r_e = Nodes_rz(l(LE_to_TE_2(ee),:),1);
    z_e = Nodes_rz(l(LE_to_TE_2(ee),:),2);
    min_r_e = min(r_e);
    min_z_e = min(z_e);
    for pp = 1:n_lGaussian_Q
        %find r' and z' at each Gaussian quadrature point
        r_prime_lGaussian(pp) = (phi2_eta_lG(:,pp)')*(r_le-min_r_le);
        z_prime_lGaussian(pp) = (phi2_eta_lG(:,pp)')*(z_le-min_z_le);
        normaliser = max(abs(r_prime_lGaussian(pp)), ...
                         abs(z_prime_lGaussian(pp)));
        r_prime_lGaussian_aux = r_prime_lGaussian(pp)/normaliser;
        z_prime_lGaussian_aux = z_prime_lGaussian(pp)/normaliser;
        %find the determinant of the Jacobian of the isoparametric 
        %map at each Gaussian quadrature point  
        det_Jle(pp) = sqrt(  r_prime_lGaussian_aux^2 ...
                           + z_prime_lGaussian_aux^2 ...
                          ) ...
                      *normaliser;
        det_Je(pp) = (r_e'-min_r_e)*Tmat2{pp}*(z_e-min_z_e);
        %Data for eigensolution
        r_pp = (r_le'-Nodes_rz(1,1))*phi2_lG(:,pp);
        z_pp = (z_le'-Nodes_rz(1,2))*phi2_lG(:,pp);
        theta_pol = atan2(z_pp,r_pp);
        phi_pp = pi - theta_m - theta_pol;
        theta_pp = lambda_eig*phi_pp;
        c_theta_pp = cos(theta_pp);
        s_theta_pp = sin(theta_pp);
        divider = max(abs(r_pp),abs(z_pp));
        r_pp_div = r_pp/divider;
        z_pp_div = z_pp/divider;
        rho_l = sqrt(r_pp_div^2+z_pp_div^2);
        rho_l = rho_l*divider;
        rho_l_minus2_pp = rho_l^(lambda_eig-2);
        rho_l_minus4_pp = rho_l^(lambda_eig-4);
        % Find the values of u_check at the Gaussian sampling points
        u_check(pp) = check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                    rho_l_minus2_pp,c_theta_pp, ...
                                    s_theta_pp);
        % Find the values of w_check at the Gaussian sampling points
        w_check(pp) = check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                    rho_l_minus2_pp,c_theta_pp, ...
                                    s_theta_pp);
        % Find the values of dr_u_check at the Gaussian sampling points
        dr_u_check(pp) = dr_check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dz_u_check at the Gaussian sampling points
        dz_u_check(pp) = dz_check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dr_w_check at the Gaussian sampling points
        dr_w_check(pp) = dr_check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dz_w_check at the Gaussian sampling points
        dz_w_check(pp) = dz_check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
    end
    for ii = 1:3 %looping over local nodes to find the contribution to 
        %the respective eq
        d_inrchu = 0;
        d_inzchw = 0;
        d_itrtrchu = 0;
        d_itrtzchw = 0;
        d_itrtzchu = 0;
        d_itztzchw = 0;
        d_inrdrchu = 0;
        d_inzdrchw = 0;
        d_inzdzchw = 0; 
        d_inrdzchu = 0;
        d_itrchu = 0;
        d_itzchw = 0;
        d_i = 0;
        for pp = 1:n_lGaussian_Q
            d_inrchu = d_inrchu ...
                       - alpha_2 ...
                         *W_lG(pp) ...
                         *phi2_lG(ii,pp) ...
                         *z_prime_lGaussian(pp) ...
                         *u_check(pp);            
            d_inzchw = d_inzchw ...
                       + alpha_2 ...
                         *W_lG(pp) ...
                         *phi2_lG(ii,pp) ...
                         *r_prime_lGaussian(pp) ...
                         *w_check(pp);
            d_itrtrchu = d_itrtrchu ...
                         + W_lG(pp) ...
                          *phi2_lG(ii,pp) ...
                          *r_prime_lGaussian(pp) ...
                          *r_prime_lGaussian(pp) ...
                          *u_check(pp) ...
                          /det_Jle(pp);
            d_itrtzchw = d_itrtzchw ...
                         + W_lG(pp) ...
                          *phi2_lG(ii,pp) ...
                          *r_prime_lGaussian(pp) ...
                          *z_prime_lGaussian(pp) ...
                          *w_check(pp) ...
                          /det_Jle(pp);
            d_itrtzchu = d_itrtzchu ...
                         + W_lG(pp) ...
                          *phi2_lG(ii,pp) ...
                          *r_prime_lGaussian(pp) ...
                          *z_prime_lGaussian(pp) ...
                          *u_check(pp) ...
                          /det_Jle(pp);
            d_itztzchw = d_itztzchw ...
                         + W_lG(pp) ...
                          *phi2_lG(ii,pp) ...
                          *z_prime_lGaussian(pp) ...
                          *z_prime_lGaussian(pp) ...
                          *w_check(pp) ...
                          /det_Jle(pp);
            d_inrdrchu = d_inrdrchu ...
                         - alpha_2 ...
                           *W_lG(pp) ...
                           *phi2_lG(ii,pp) ...
                           *z_prime_lGaussian(pp) ...
                           *dr_u_check(pp);
            d_inzdrchw = d_inzdrchw ...
                         + alpha_2 ...
                           *W_lG(pp) ...
                           *phi2_lG(ii,pp) ...
                           *r_prime_lGaussian(pp) ...
                           *dr_w_check(pp);
            d_inzdzchw = d_inzdzchw ...
                         + alpha_2 ...
                           *W_lG(pp) ...
                           *phi2_lG(ii,pp) ...
                           *r_prime_lGaussian(pp) ...
                           *dz_w_check(pp);
            d_inrdzchu = d_inrdzchu ...
                         - alpha_2 ...
                           *W_lG(pp) ...
                           *phi2_lG(ii,pp) ...
                           *z_prime_lGaussian(pp) ...
                           *dz_u_check(pp);                      
            d_itrchu = d_itrchu ...
                       + W_lG(pp) ...
                         *phi2_lG(ii,pp) ...
                         *r_prime_lGaussian(pp) ...
                         *u_check(pp);
            d_itzchw = d_itzchw ...
                       + W_lG(pp) ...
                         *phi2_lG(ii,pp) ...
                         *z_prime_lGaussian(pp) ...
                         *w_check(pp);
            d_i = d_i ...
                  + W_lG(pp) ...
                    *phi2_lG(ii,pp) ...
                    *det_Jle(pp);
        end
        Mr_near(l_2(ee,ii)) ...
            = Mr_near(l_2(ee,ii)) ...
              + 2 ...
                *delta_t ...
                *A ...
                *(  (1+4*Be*Ca*Es) ...
                    *(  d_itrtrchu ...
                      + d_itrtzchw ...
                     ) ...
                    /(4*Ca*Es) ...
                  - (  d_inrdrchu ... 
                     + d_inzdrchw ...
                    ) ...
                 ) ...
                /3;
        Mz_near(l_2(ee,ii)) ...
            = Mz_near(l_2(ee,ii)) ...
              + 2 ...
                *delta_t ...
                *A ...
                *(  (1+4*Be*Ca*Es) ...
                    *(  d_itrtzchu ...
                      + d_itztzchw ...
                     ) ...
                    /(4*Ca*Es) ...
                  - (  d_inzdzchw ...
                     + d_inrdzchu ...
                    ) ...
                 ) ...
                /3;
        S2_near(l2_2(ee,ii)) ...
            = S2_near(l2_2(ee,ii)) ...
              - A ...
                *(  d_itrchu ...
                  + d_itzchw ...
                 ) ...
                /2;
        E2_near(l2_2(ee,ii)) ...
            = E2_near(l2_2(ee,ii)) ...
              + 2 ...
                *delta_t ...
                *A ...
                *(  d_inrchu ...
                  + d_inzchw ...
                 ) ...
                /3;
%               + Fs ...
%                 *Ds ...
%                 *d_i ...
        D2_near(l2_2(ee,ii)) ...
            = D2_near(l2_2(ee,ii)) ...
              - 2 ...
                *delta_t ...
                *Ds ...
                *d_i ...
                /3;
        for jj = 1:3%looping over local nodes to calculate inner 
            %product of basis function by basis function ii
            d_ijtrtr = 0;
            d_ijtrtz = 0;
            d_ijtztz = 0;
            d_ijnr = 0;
            d_ijnz = 0;
            ds_ijtr = 0;
            ds_ijtz = 0;
            d_ijtr = 0;
            d_ijtz = 0;
            ds_ji = 0;
            d_ij = 0;
            for pp = 1:n_lGaussian_Q
                d_ijtrtr = d_ijtrtr ...
                           + W_lG(pp) ...
                             *r_prime_lGaussian(pp) ...
                             *r_prime_lGaussian(pp) ...
                             *phi2_lG(ii,pp) ...
                             *phi2_lG(jj,pp) ...
                             /det_Jle(pp);
                d_ijtrtz = d_ijtrtz ...
                           + W_lG(pp) ...
                             *r_prime_lGaussian(pp) ...
                             *z_prime_lGaussian(pp) ...
                             *phi2_lG(ii,pp) ...
                             *phi2_lG(jj,pp) ...
                             /det_Jle(pp);
                d_ijtztz = d_ijtztz ...
                           + W_lG(pp) ...
                             *z_prime_lGaussian(pp) ...
                             *z_prime_lGaussian(pp) ...
                             *phi2_lG(ii,pp) ...
                             *phi2_lG(jj,pp) ...
                             /det_Jle(pp);
                d_ijnr   = d_ijnr ...
                           - alpha_2 ...
                             *W_lG(pp) ...
                             *phi2_lG(ii,pp) ...
                             *phi2_lG(jj,pp) ...
                             *z_prime_lGaussian(pp);
                d_ijnz   = d_ijnz ...
                           + alpha_2 ...
                             *W_lG(pp) ...
                             *phi2_lG(ii,pp) ...
                             *phi2_lG(jj,pp) ...
                             *r_prime_lGaussian(pp);
                ds_ijtr = ds_ijtr ...
                          + W_lG(pp) ...
                            *r_prime_lGaussian(pp) ...
                            *phi2_lG(ii,pp) ...
                            *phi2_eta_lG(jj,pp) ...
                            /det_Jle(pp);
                ds_ijtz = ds_ijtz ...
                          + W_lG(pp) ...
                            *z_prime_lGaussian(pp) ...
                            *phi2_lG(ii,pp) ...
                            *phi2_eta_lG(jj,pp) ...
                            /det_Jle(pp);
                d_ijtr = d_ijtr ...
                         + W_lG(pp) ...
                           *r_prime_lGaussian(pp) ...
                           *phi2_lG(ii,pp) ...
                           *phi2_lG(jj,pp);
                d_ijtz = d_ijtz ...
                         + W_lG(pp) ...
                           *z_prime_lGaussian(pp) ...
                           *phi2_lG(ii,pp) ...
                           *phi2_lG(jj,pp);
                ds_ji = ds_ji ...
                        + W_lG(pp) ...
                          *phi2_lG(jj,pp) ...
                          *phi2_eta_lG(ii,pp);
                d_ij = d_ij ...
                       + W_lG(pp) ...
                         *phi2_lG(ii,pp) ...
                         *phi2_lG(jj,pp) ...
                         *det_Jle(pp);
            end
            As2_ij = 0;
            Bs2_ij = 0;
            Cs2_ij = 0;
            Ds2_ij = 0;
            Es2_ij = 0;
            for kk = 1:3
                ds_jkitr = 0;
                ds_jkitz = 0;
                ds_ijktr = 0;
                ds_ijktz = 0;
                for pp = 1:n_lGaussian_Q
                    ds_jkitr = ds_jkitr ...
                               + W_lG(pp) ...
                                 *phi2_lG(jj,pp) ...
                                 *phi2_lG(kk,pp) ...
                                 *phi2_eta_lG(ii,pp) ...
                                 *r_prime_lGaussian(pp) ...
                                 /det_Jle(pp);
                    ds_jkitz = ds_jkitz ...
                               + W_lG(pp) ...
                                 *phi2_lG(jj,pp) ...
                                 *phi2_lG(kk,pp) ...
                                 *phi2_eta_lG(ii,pp) ...
                                 *z_prime_lGaussian(pp) ...
                                 /det_Jle(pp);
                    ds_ijktr = ds_ijktr ...
                               + W_lG(pp) ...
                                 *phi2_lG(ii,pp) ...
                                 *phi2_lG(jj,pp) ...
                                 *phi2_eta_lG(kk,pp) ...
                                 *r_prime_lGaussian(pp) ...
                                 /det_Jle(pp);
                    ds_ijktz = ds_ijktz ...
                               + W_lG(pp) ...
                                 *phi2_lG(ii,pp) ...
                                 *phi2_lG(jj,pp) ...
                                 *phi2_eta_lG(kk,pp) ...
                                 *z_prime_lGaussian(pp) ...
                                 /det_Jle(pp);
                end
                As2_ij = As2_ij ...
                         + us2(l2_2(ee,kk)) ...
                           *ds_jkitr ...
                         + ws2(l2_2(ee,kk)) ...
                           *ds_jkitz;
                Bs2_ij ...
                    = Bs2_ij ...
                      + ds_jkitr ...
                        *(  a_n       *Nodes_rz(l_2(ee,kk),1) ...
                          - a_n_minus1*Nodes_rz_minus1(l_2(ee,kk),1) ...
                          + a_n_minus2*Nodes_rz_minus2(l_2(ee,kk),1) ...
                         );
                Cs2_ij ...
                    = Cs2_ij ...
                      + ds_jkitz ...
                        *(  a_n       *Nodes_rz(l_2(ee,kk),2) ...
                          - a_n_minus1*Nodes_rz_minus1(l_2(ee,kk),2) ...
                          + a_n_minus2*Nodes_rz_minus2(l_2(ee,kk),2) ...
                         );
                Ds2_ij ...
                    = Ds2_ij ...
                      + ds_ijktr ...
                        *(  a_n       *Nodes_rz(l_2(ee,kk),1) ...
                          - a_n_minus1*Nodes_rz_minus1(l_2(ee,kk),1) ...
                          + a_n_minus2*Nodes_rz_minus2(l_2(ee,kk),1) ...
                         );
                Es2_ij ...
                    = Es2_ij ...
                      + ds_ijktz ...
                        *(  a_n       *Nodes_rz(l_2(ee,kk),2) ...
                          - a_n_minus1*Nodes_rz_minus1(l_2(ee,kk),2) ...
                          + a_n_minus2*Nodes_rz_minus2(l_2(ee,kk),2) ...
                         );
            end
            %Residual contributions
            Mr_near(l_2(ee,ii)) ...
                = Mr_near(l_2(ee,ii)) ...
                  + 2 ...
                    *delta_t ...
                    *lambda2(l2_2(ee,jj)) ... 
                    *d_ijnr ...
                    /3 ...
                  + (1+4*Be*Ca*Es) ...
                    *delta_t ...
                    *(  u_bar(l_2(ee,jj)) ...
                        *d_ijtrtr ...
                      + w_bar(l_2(ee,jj)) ...
                        *d_ijtrtz ...
                     ) ...
                    /(6*Ca*Es) ...
                  + (1-4*Be*Ca*Es) ...
                    *delta_t ...
                    *(  u_s(l2_2(ee,jj)) ...
                        *d_ijtrtr ...
                      + w_s(l2_2(ee,jj)) ...
                        *d_ijtrtz ...
                     ) ...
                    /(6*Ca*Es) ...
                  - delta_t ...
                    *(  us2(l2_2(ee,jj)) ...
                        *d_ijtrtr ...
                      + ws2(l2_2(ee,jj)) ...
                        *d_ijtrtz ...
                     ) ...
                    /(3*Ca*Es);
            Mz_near(l_2(ee,ii)) ...
                = Mz_near(l_2(ee,ii)) ...
                  + 2 ...
                    *delta_t ...
                    *lambda2(l2_2(ee,jj)) ...
                    *d_ijnz ...
                    /3 ...
                  + (1+4*Be*Ca*Es) ...
                    *delta_t ...
                    *(  u_bar(l_2(ee,jj)) ...
                        *d_ijtrtz ...
                      + w_bar(l_2(ee,jj)) ...
                        *d_ijtztz ...
                     ) ...
                    /(6*Ca*Es) ...
                  + (1-4*Be*Ca*Es) ...
                    *delta_t ...
                    *(  u_s(l2_2(ee,jj)) ...
                        *d_ijtrtz ...
                      + w_s(l2_2(ee,jj)) ...
                        *d_ijtztz ...
                     ) ...
                    /(6*Ca*Es) ...
                  - delta_t ...
                    *(  us2(l2_2(ee,jj)) ...
                        *d_ijtrtz ...
                      + ws2(l2_2(ee,jj)) ...
                        *d_ijtztz ...
                     ) ...
                    /(3*Ca*Es);
            S2_near(l2_2(ee,ii)) ...
                = S2_near(l2_2(ee,ii)) ...
                  + d_ijtr ...
                    *(  us2(l2_2(ee,jj)) ...
                      - u_bar(l_2(ee,jj))/2 ...
                      - u_s(l2_2(ee,jj))/2 ...
                     ) ...
                  + d_ijtz ...
                    *(  ws2(l2_2(ee,jj)) ...
                      - w_bar(l_2(ee,jj))/2 ...
                      - w_s(l2_2(ee,jj))/2 ...
                     ) ...
                  + Es ... 
                    *sigma2(l2_2(ee,jj)) ...
                    *ds_ji;
            I_near(l2_2(ee,ii)) ...
                = I_near(l2_2(ee,ii)) ...
                  + d_ijnr ...
                    *(  us2(l2_2(ee,jj)) ...
                      - u_s(l2_2(ee,jj)) ...
                     ) ...
                  + d_ijnz ...
                    *(  ws2(l2_2(ee,jj)) ...
                      - w_s(l2_2(ee,jj)) ...
                     );
            E2_near(l2_2(ee,ii)) ...
                = E2_near(l2_2(ee,ii)) ...
                  + 2 ...
                    *delta_t ...
                    *(  d_ijnr ...
                        *(  u_bar(l_2(ee,jj)) ...
                          - us2( l2_2(ee,jj)) ...
                         ) ...
                      + d_ijnz ...
                        *(  w_bar(l_2(ee,jj)) ...
                          - ws2( l2_2(ee,jj)) ...
                         ) ...
                     ) ...
                    /3 ...
                  + d_ij ...
                    *Ls ...
                    *(  a_n       *rhos2(l2_2(ee,jj)) ...
                      - a_n_minus1*rhos2_minus1(l2_2(ee,jj)) ...
                      + a_n_minus2*rhos2_minus2(l2_2(ee,jj)) ...
                     ) ...
                  + Ls ...
                    *rhos2(l2_2(ee,jj)) ...
                    *(- 2 ...
                        *delta_t ...
                        *As2_ij ...
                        /3 ...
                      + Bs2_ij ...
                      + Cs2_ij ...
                      + Ds2_ij ...
                      + Es2_ij ...
                     );
%                   - Fs ...
%                     *d_ij ...
%                     *rhos2(l2_2(ee,jj));
            D2_near(l2_2(ee,ii)) ...
                = D2_near(l2_2(ee,ii)) ...
                  + d_ij ...
                    *(  2 ...
                        *delta_t ...
                        *rhos2(l2_2(ee,jj)) ...
                        /3 ...
                      + Ts ...
                        *(  a_n       *rhos2(l2_2(ee,jj)) ...
                          - a_n_minus1*rhos2_minus1(l2_2(ee,jj)) ...
                          + a_n_minus2*rhos2_minus2(l2_2(ee,jj)) ...
                         ) ...
                     ) ...
                  + Ts ...
                    *rhos2(l2_2(ee,jj)) ...
                    *(- 2 ...
                        *delta_t ...
                        *As2_ij ...
                        /3 ...
                      + Bs2_ij ...
                      + Cs2_ij ...
                      + Ds2_ij ...
                      + Es2_ij ...
                     );
        end
        for jj = 1:6
            dr_ijnr = 0;
            dr_ijnz = 0;
            dz_ijnr = 0;
            dz_ijnz = 0;
            for pp = 1:n_lGaussian_Q
                dr_ijnr = dr_ijnr ...
                          - alpha_2 ...
                            *W_lG(pp) ...
                            *phi2_lG(ii,pp) ...
                            *Tmat2{pp}(jj,:)*(z_e-min_z_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                dr_ijnz = dr_ijnz ...
                          + alpha_2 ...
                            *W_lG(pp) ...
                            *phi2_lG(ii,pp) ...
                            *Tmat2{pp}(jj,:)*(z_e-min_z_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
                dz_ijnr = dz_ijnr ...
                          + alpha_2 ...
                            *W_lG(pp) ...
                            *phi2_lG(ii,pp) ...
                            *Tmat2{pp}(jj,:)*(r_e-min_r_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                dz_ijnz = dz_ijnz ...
                          - alpha_2 ...
                            *W_lG(pp) ...
                            *phi2_lG(ii,pp) ...
                            *Tmat2{pp}(jj,:)*(r_e-min_r_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
            end
            Mr_near(l_2(ee,ii)) ...
                = Mr_near(l_2(ee,ii)) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_bar(l(LE_to_TE_2(ee),jj)) ...
                        *dr_ijnr ...
                      + w_bar(l(LE_to_TE_2(ee),jj)) ...
                        *dr_ijnz ...
                     ) ...
                    /3;
            Mz_near(l_2(ee,ii)) ...
                = Mz_near(l_2(ee,ii)) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_bar(l(LE_to_TE_2(ee),jj)) ...
                        *dz_ijnr ...
                      + w_bar(l(LE_to_TE_2(ee),jj)) ...
                        *dz_ijnz ...
                     ) ...
                    /3;
        end
    end
end

%Contact line contribution to S2
S2_near(c2) = S2_near(c2) ...
              + Es ...
                *sigma2(c2);
%Contact line contribution to E2
E2_near(c2) = E2_near(c2) ...
              + 2 ...
                *delta_t ...
                *Ls ...
                *rhos1(c1) ...
                *(  us1(c1) ...
                    *m1_r ...
                  + ws1(c1) ...
                    *m1_z ...
                 ) ...
                /3 ...
              - Ls ...
                *rhos1(c1) ...
                *(  m1_r ...
                    *(  a_n       *Nodes_rz(contact_line,1) ...
                      - a_n_minus1*Nodes_rz_minus1(contact_line,1) ...
                      + a_n_minus2*Nodes_rz_minus2(contact_line,1) ...
                     ) ...
                  + m1_z ...
                    *(  a_n       *Nodes_rz(contact_line,2) ...
                      - a_n_minus1*Nodes_rz_minus1(contact_line,2) ...
                      + a_n_minus2*Nodes_rz_minus2(contact_line,2) ...
                     ) ...
                 );
%Contact line contribution to D2
D2_near(c2) = D2_near(c2) ...
              + 2 ...
                *delta_t ...
                *Ts ...
                *rhos1(c1) ...
                *(  us1(c1) ...
                    *m1_r ...
                  + ws1(c1) ...
                    *m1_z ...
                 ) ...
                /3 ...
              - Ts ...
                *rhos1(c1) ...
                *(  m1_r ...
                    *(  a_n       *Nodes_rz(contact_line,1) ...
                      - a_n_minus1*Nodes_rz_minus1(contact_line,1) ...
                      + a_n_minus2*Nodes_rz_minus2(contact_line,1) ...
                     ) ...
                  + m1_z ...
                    *(  a_n       *Nodes_rz(contact_line,2) ...
                      - a_n_minus1*Nodes_rz_minus1(contact_line,2) ...
                      + a_n_minus2*Nodes_rz_minus2(contact_line,2) ...
                     ) ...
                 );

%Strong formulation for the state equation on the
%liquid-solid interface
for ii = 1:n_spines_near
    T2_near(ii) = sigma2(ii) + Cs*(rhos2(ii)-1);
end

%Adding the inflow-surface boundary contributions to 
%the momentum eqns
for ee = 1:n4_el%looping over elements
    r_le = Nodes_rz(l_4(ee,:),1);
    z_le = Nodes_rz(l_4(ee,:),2);
    min_r_le = min(r_le);
    min_z_le = min(z_le);
    r_e = Nodes_rz(l(LE_to_TE_4(ee),:),1);
    z_e = Nodes_rz(l(LE_to_TE_4(ee),:),2);
    min_r_e = min(r_e);
    min_z_e = min(z_e);
    for pp = 1:n_lGaussian_Q
        %find r' and z' at each Gaussian quadrature point
        r_prime_lGaussian(pp) = (phi4_xi_lG(:,pp)')*(r_le-min_r_le);
        z_prime_lGaussian(pp) = (phi4_xi_lG(:,pp)')*(z_le-min_z_le);
        normaliser = max(abs(r_prime_lGaussian(pp)), ...
                         abs(z_prime_lGaussian(pp)));
        r_prime_lGaussian_aux = r_prime_lGaussian(pp)/normaliser;
        z_prime_lGaussian_aux = z_prime_lGaussian(pp)/normaliser;
        %find the determinant of the Jacobian of the isoparametric 
        %map at each Gaussian quadrature point
        det_Jle(pp) = sqrt(  r_prime_lGaussian_aux^2 ...
                           + z_prime_lGaussian_aux^2 ...
                          ) ...
                      *normaliser;
        det_Je(pp) = (r_e'-min_r_e)*Tmat4{pp}*(z_e-min_z_e);
        %Data for eigensolution
        r_pp = (r_le'-Nodes_rz(1,1))*phi4_lG(:,pp);
        z_pp = (z_le'-Nodes_rz(1,2))*phi4_lG(:,pp);
        theta_pol = atan2(z_pp,r_pp);
        phi_pp = pi - theta_m - theta_pol;
        theta_pp = lambda_eig*phi_pp;
        c_theta_pp = cos(theta_pp);
        s_theta_pp = sin(theta_pp);
        divider = max(abs(r_pp),abs(z_pp));
        r_pp_div = r_pp/divider;
        z_pp_div = z_pp/divider;
        rho_l = sqrt(r_pp_div^2+z_pp_div^2);
        rho_l = rho_l*divider;
        rho_l_minus2_pp = rho_l^(lambda_eig-2);
        rho_l_minus4_pp = rho_l^(lambda_eig-4);
        % Find the values of u_check at the Gaussian sampling points
        u_check(pp) = check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                    rho_l_minus2_pp,c_theta_pp, ...
                                    s_theta_pp);
        % Find the values of w_check at the Gaussian sampling points
        w_check(pp) = check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                    rho_l_minus2_pp,c_theta_pp, ...
                                    s_theta_pp);
        % Find the values of dr_u_check at the Gaussian sampling points
        dr_u_check(pp) = dr_check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dz_u_check at the Gaussian sampling points
        dz_u_check(pp) = dz_check_u_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dr_w_check at the Gaussian sampling points
        dr_w_check(pp) = dr_check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
        % Find the values of dz_w_check at the Gaussian sampling points
        dz_w_check(pp) = dz_check_w_of_rz(r_pp,z_pp,lambda_eig, ...
                                          rho_l_minus2_pp, ...
                                          rho_l_minus4_pp, ...
                                          c_theta_pp,s_theta_pp);
    end
    for ii = 1:3 %looping over local nodes to find the contribution to 
        %the respective eq
        g_inrdrchu = 0;
        g_inzdrchw = 0;
        g_inzdzchw = 0;
        g_inrdzchu = 0;
        g_ichu = 0;
        g_ichw = 0;
        for pp = 1:n_lGaussian_Q
            g_inrdrchu = g_inrdrchu ...
                         - alpha_4 ...
                           *W_lG(pp) ...
                           *phi4_lG(ii,pp) ...
                           *z_prime_lGaussian(pp) ...
                           *dr_u_check(pp);
            g_inzdrchw = g_inzdrchw ...
                         + alpha_4 ...
                           *W_lG(pp) ...
                           *phi4_lG(ii,pp) ...
                           *r_prime_lGaussian(pp) ...
                           *dr_w_check(pp);
            g_inzdzchw = g_inzdzchw ...
                         + alpha_4 ...
                           *W_lG(pp) ...
                           *phi4_lG(ii,pp) ...
                           *r_prime_lGaussian(pp) ...
                           *dz_w_check(pp);
            g_inrdzchu = g_inrdzchu ...
                         - alpha_4 ...
                           *W_lG(pp) ...
                           *phi4_lG(ii,pp) ...
                           *z_prime_lGaussian(pp) ...
                           *dz_u_check(pp);
            g_ichu = g_ichu ...
                     + W_lG(pp) ...
                       *phi4_lG(ii,pp) ...
                       *u_check(pp) ...
                       *det_Jle(pp);
            g_ichw = g_ichw ...
                     + W_lG(pp) ...
                       *phi4_lG(ii,pp) ...
                       *w_check(pp) ...
                       *det_Jle(pp);
        end
        Mr_near(l_4(ee,ii)) ...
            = Mr_near(l_4(ee,ii)) ...
              - 2 ...
                *delta_t ...
                *A ...
                *(  g_inrdrchu ... % (*2) + g_inzdzchu ...
                  + g_inzdrchw ...
                 ) ...
                /3;
        Mz_near(l_4(ee,ii)) ...
            = Mz_near(l_4(ee,ii)) ...
              - 2 ...
                *delta_t ...
                *A ...
                *(  g_inzdzchw ... % (*2) + g_inrdrchw ...
                  + g_inrdzchu ...
                 ) ...
                /3;
        Cu(l4_4(ee,ii)) ...
            = Cu(l4_4(ee,ii)) ...
              - A ...
                *g_ichu;
        Cw(l4_4(ee,ii)) ...
            = Cw(l4_4(ee,ii)) ...
              - A ...
                *g_ichw;
        for jj = 1:3%looping over local nodes to calculate inner 
            %product of basis function by basis function ii
            g_ij = 0;
            for pp = 1:n_lGaussian_Q
                g_ij = g_ij ...
                       + W_lG(pp) ...
                         *phi4_lG(ii,pp) ...
                         *phi4_lG(jj,pp) ...
                         *det_Jle(pp);
            end
            %residual contributions
            Cu(l4_4(ee,ii)) ...
                = Cu(l4_4(ee,ii)) ...
                  + g_ij ...
                    *(  u_far(l_4(ee,jj)-n_v_pre_start_far) ...
                      - u_bar(l_4(ee,jj)) ...
                     );
            Cw(l4_4(ee,ii)) ...
                = Cw(l4_4(ee,ii)) ...
                  + g_ij ...
                    *(  w_far(l_4(ee,jj)-n_v_pre_start_far) ...
                      - w_bar(l_4(ee,jj)) ...
                     );
        end
        for jj = 1:6
            gr_ijnr = 0;
            gr_ijnz = 0;
            gz_ijnr = 0;
            gz_ijnz = 0;
            for pp = 1:n_lGaussian_Q
                gr_ijnr = gr_ijnr ...
                          - alpha_4 ...
                            *W_lG(pp) ...
                            *phi4_lG(ii,pp) ...
                            *Tmat4{pp}(jj,:)*(z_e-min_z_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                gr_ijnz = gr_ijnz ...
                          + alpha_4 ...
                            *W_lG(pp) ...
                            *phi4_lG(ii,pp) ...
                            *Tmat4{pp}(jj,:)*(z_e-min_z_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
                gz_ijnr = gz_ijnr ...
                          + alpha_4 ...
                            *W_lG(pp) ...
                            *phi4_lG(ii,pp) ...
                            *Tmat4{pp}(jj,:)*(r_e-min_r_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                gz_ijnz = gz_ijnz ...
                          - alpha_4 ...
                            *W_lG(pp) ...
                            *phi4_lG(ii,pp) ...
                            *Tmat4{pp}(jj,:)*(r_e-min_r_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
            end
            Mr_near(l_4(ee,ii)) ...
                = Mr_near(l_4(ee,ii)) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_bar(l(LE_to_TE_4(ee),jj)) ...
                        *gr_ijnr ...
                      + w_bar(l(LE_to_TE_4(ee),jj)) ...
                        *gr_ijnz ...
                     ) ...
                    /3;
            Mz_near(l_4(ee,ii)) ...
                = Mz_near(l_4(ee,ii)) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_bar(l(LE_to_TE_4(ee),jj)) ...
                        *gz_ijnr ...
                      + w_bar(l(LE_to_TE_4(ee),jj)) ...
                        *gz_ijnz ...
                     ) ...
                    /3;
        end
    end
end

%Bulk equations in far field
for ee = n_el_near+1:n_el %go through every element
    %find the r and z coordinates of the element nodes
    r_e = Nodes_rz(l(ee,:),1);
    z_e = Nodes_rz(l(ee,:),2);
    min_r_e = min(r_e);
    min_z_e = min(z_e);
    for pp = 1:n_Gaussian_Q
        det_Je(pp) = (r_e'-min_r_e)*T{pp}*(z_e-min_z_e);
    end
    for ii = 1:6 %select each basis function that has support on 
        %the chosen element
        a_igr = 0;
        a_igz = 0;%in this one the sum over jj is empty
        % finding a_ii (this is multiplied by the Stokes number St)
        for pp = 1:n_Gaussian_Q
            a_igr = a_igr ...
                    + W_G(pp) ...
                      *phi_G(ii,pp) ...
                      *gr ...
                      *det_Je(pp);
            a_igz = a_igz ...
                    + W_G(pp) ...
                      *phi_G(ii,pp) ...
                      *gz ...
                      *det_Je(pp);
        end
        %Residual contributions
        Mr_far(l(ee,ii)-n_v_pre_start_far) ...
            = Mr_far(l(ee,ii)-n_v_pre_start_far) ...
              - 2 ...
                *delta_t ...
                *St ...
                *a_igr ...
                /3;
        Mz_far(l(ee,ii)-n_v_pre_start_far) ...
            = Mz_far(l(ee,ii)-n_v_pre_start_far) ...
              - 2 ...
                *delta_t ...
                *St ...
                *a_igz ...
                /3;
        for jj = 1:6 %compute product of basis function ii by the part
            %of the solution that is supported on the element (for 
            %linear terms this is just the six hat functions on each 
            %node times its node value)
            azr_ij = 0;
            arz_ij = 0;
            arr_ij = 0;
            azz_ij = 0;
            a_ij = 0;
            for pp = 1:n_Gaussian_Q
                azr_ij = azr_ij - W_G(pp) ...
                                  *(T{pp}(ii,:)*(r_e-min_r_e)) ...
                                  *(T{pp}(jj,:)*(z_e-min_z_e)) ...
                                  /det_Je(pp);
                arz_ij = arz_ij - W_G(pp) ...
                                  *(T{pp}(ii,:)*(z_e-min_z_e)) ...
                                  *(T{pp}(jj,:)*(r_e-min_r_e)) ...
                                  /det_Je(pp);
                arr_ij = arr_ij + W_G(pp) ...
                                  *(T{pp}(ii,:)*(z_e-min_z_e)) ...
                                  *(T{pp}(jj,:)*(z_e-min_z_e)) ...
                                  /det_Je(pp);
                azz_ij = azz_ij + W_G(pp) ...
                                  *(T{pp}(ii,:)*(r_e-min_r_e)) ...
                                  *(T{pp}(jj,:)*(r_e-min_r_e)) ...
                                  /det_Je(pp);
                a_ij   = a_ij   + W_G(pp) ...
                                  *phi_G(ii,pp) ...
                                  *phi_G(jj,pp) ...
                                  *det_Je(pp);
            end
            A_ij = 0;
            B_ij = 0;
            C_ij = 0;
            for kk = 1:6 %This second loop is needed because of
                %the non-linearity of the convective term 
                ar_ikj = 0;
                az_ikj = 0;
                for pp = 1:n_Gaussian_Q
                    ar_ikj = ar_ikj ...
                             + W_G(pp) ...
                               *phi_G(ii,pp) ...
                               *phi_G(kk,pp) ...
                               *(T{pp}(jj,:)*(z_e-min_z_e));
                    az_ikj = az_ikj ...
                             - W_G(pp) ...
                               *phi_G(ii,pp) ...
                               *phi_G(kk,pp) ...
                               *(T{pp}(jj,:)*(r_e-min_r_e));
                end
                A_ij    = A_ij ...
                          + ar_ikj ...
                            *u_far(l(ee,kk)-n_v_pre_start_far) ...
                          + az_ikj ...
                            *w_far(l(ee,kk)-n_v_pre_start_far);
                B_ij    = B_ij ...
                          + ar_ikj ...
                            *(  a_n       *Nodes_rz(l(ee,kk),1) ...
                              - a_n_minus1*Nodes_rz_minus1(l(ee,kk),1) ...
                              + a_n_minus2*Nodes_rz_minus2(l(ee,kk),1) ...
                             );
                C_ij    = C_ij ...
                          + az_ikj ...
                            *(  a_n       *Nodes_rz(l(ee,kk),2) ...
                              - a_n_minus1*Nodes_rz_minus1(l(ee,kk),2) ...
                              + a_n_minus2*Nodes_rz_minus2(l(ee,kk),2) ...
                             );
            end
            %Residual contributions
            Mr_far(l(ee,ii)-n_v_pre_start_far) ...
                = Mr_far(l(ee,ii)-n_v_pre_start_far) ...
                  + 2 ...
                    *delta_t ...
                    *(  u_far(l(ee,jj)-n_v_pre_start_far) ...
                        *(  arr_ij ... % (*2)
                          + azz_ij ...
                         ) ... % + w_far(l(ee,jj)-n_v_pre_start_far)*azr_ij ...
                     ) ...
                    /3 ...
                  + Re ...
                    *a_ij ...
                    *(  a_n       *u_far(l(ee,jj)-n_v_pre_start_far) ...
                      - a_n_minus1*u_minus1(l(ee,jj)) ...
                      + a_n_minus2*u_minus2(l(ee,jj)) ...
                     ) ...
                 + Re ...
                   *u_far(l(ee,jj)-n_v_pre_start_far) ...
                   *(  2 ...
                       *delta_t ...
                       *A_ij ...
                       /3 ...
                     - B_ij ...
                     - C_ij ...
                    );
            Mz_far(l(ee,ii)-n_v_pre_start_far) ...
                = Mz_far(l(ee,ii)-n_v_pre_start_far) ...
                  + 2 ...
                    *delta_t ...
                    *(  w_far(l(ee,jj)-n_v_pre_start_far) ...
                        *(  arr_ij ...
                          + azz_ij ... % (*2)
                         ) ... % + u_far(l(ee,jj)-n_v_pre_start_far)*arz_ij ...
                     ) ...
                    /3 ...
                  + Re ...
                    *a_ij ...
                    *(  a_n       *w_far(l(ee,jj)-n_v_pre_start_far) ...
                      - a_n_minus1*w_minus1(l(ee,jj)) ...
                      + a_n_minus2*w_minus2(l(ee,jj)) ...
                     ) ...
                 + Re ...
                   *w_far(l(ee,jj)-n_v_pre_start_far) ...
                   *(  2 ...
                       *delta_t ...
                       *A_ij ...
                       /3 ...
                     - B_ij ...
                     - C_ij ...
                    );
        end
        for jj = 1:3
            br_ji = 0;
            bz_ji = 0;
            for pp = 1:n_Gaussian_Q
                br_ji = br_ji ...
                        + W_G(pp) ...
                          *psi_G(jj,pp) ...
                          *(T{pp}(ii,:)*(z_e-min_z_e));
                bz_ji = bz_ji ...
                        - W_G(pp) ...
                          *psi_G(jj,pp) ...
                          *(T{pp}(ii,:)*(r_e-min_r_e));
            end
            %Residual contribution
            Mr_far(l(ee,ii)-n_v_pre_start_far) ...
                = Mr_far(l(ee,ii)-n_v_pre_start_far) ...
                  - 2 ...
                    *delta_t ...
                    *br_ji ...
                    *p(lp(ee,jj)) ...
                    /3;
            Mz_far(l(ee,ii)-n_v_pre_start_far) ...
                = Mz_far(l(ee,ii)-n_v_pre_start_far) ...
                  - 2 ...
                    *delta_t ...
                    *bz_ji ...
                    *p(lp(ee,jj)) ...
                    /3;
            C_far(lp(ee,jj)-n_p_pre_start_far) ...
                = C_far(lp(ee,jj)-n_p_pre_start_far) ...
                  - br_ji ...
                    *u_far(l(ee,ii)-n_v_pre_start_far) ...
                  - bz_ji ...
                    *w_far(l(ee,ii)-n_v_pre_start_far);
        end
    end
end

%Free surface contributions in the far field
for ee = n1_el:-1:n1_el_near+1
    r_le = Nodes_rz(l_1(ee,:),1);
    z_le = Nodes_rz(l_1(ee,:),2);
    min_r_le = min(r_le);
    min_z_le = min(z_le);
    r_e = Nodes_rz(l(LE_to_TE_1(ee),:),1);
    z_e = Nodes_rz(l(LE_to_TE_1(ee),:),2);
    min_r_e = min(r_e);
    min_z_e = min(z_e);
    for pp = 1:n_lGaussian_Q
        %find r' and z' (derivatives with respect to 
        %the master element parametrisation) at each 
        %Gaussian quadrature point
        r_prime_lGaussian(pp) = (phi1_xi_lG(:,pp)')*(r_le-min_r_le);
        z_prime_lGaussian(pp) = (phi1_xi_lG(:,pp)')*(z_le-min_z_le);   
        normaliser = max(abs(r_prime_lGaussian(pp)), ...
                         abs(z_prime_lGaussian(pp)));
        r_prime_lGaussian_aux = r_prime_lGaussian(pp)/normaliser;
        z_prime_lGaussian_aux = z_prime_lGaussian(pp)/normaliser;
        %find the determinant of the Jacobian of the 
        %isoparametric map at each Gaussian quadrature 
        %point
        det_Jle(pp) = sqrt(  r_prime_lGaussian_aux^2 ...
                           + z_prime_lGaussian_aux^2 ...
                          ) ...
                      *normaliser;
        det_Je(pp) = (r_e'-min_r_e)*Tmat1{pp}*(z_e-min_z_e);
    end
    for ii = 1:3 %looping over line-element nodes
        %to find contribution to each equation
        c_i = 0;
        for pp = 1:n_lGaussian_Q
            c_i = c_i ...
                  + W_lG(pp) ...
                    *phi1_lG(ii,pp) ...
                    *det_Jle(pp);
        end
%         E1_far(l1_1(ee,ii)-n_spines_pre_start_far) ...
%             = E1_far(l1_1(ee,ii)-n_spines_pre_start_far) ...
%               + Fg ...
%                 *Dg ...
%                 *c_i;
        D1_far(l1_1(ee,ii)-n_spines_pre_start_far) ...
            = D1_far(l1_1(ee,ii)-n_spines_pre_start_far) ...
              - 2 ...
                *delta_t ...
                *Dg ...
                *c_i ...
                /3;
        for jj = 1:3 %looping over line element nodes to 
            %find pair-wise inner product of basis functions
            cs_jitr = 0;
            cs_jitz = 0;
            %Variables needed for Mr
            c_ijnr = 0;
            %Variables needed for Mz
            c_ijnz = 0;
            %Variables needed for S1
            c_ijtr = 0;
            c_ijtz = 0;
            cs_ji = 0;
            %Variables needed for E1
            c_ij = 0;
            for pp = 1:n_lGaussian_Q
                cs_jitr = cs_jitr ...
                          + W_lG(pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_xi_lG(ii,pp) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                cs_jitz = cs_jitz ...
                          + W_lG(pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_xi_lG(ii,pp) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                %Variables needed for Mr
                c_ijnr  = c_ijnr  ...
                          - alpha_1 ...
                            *W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *phi1_lG(jj,pp) ...
                            *z_prime_lGaussian(pp);
                %Variables needed for Mz
                c_ijnz  = c_ijnz  ...
                          + alpha_1 ...
                            *W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *phi1_lG(jj,pp) ...
                            *r_prime_lGaussian(pp);
                %Variables needed for S1
                c_ijtr  = c_ijtr  ...
                          + W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *phi1_lG(jj,pp) ...
                            *r_prime_lGaussian(pp);
                c_ijtz  = c_ijtz  ...
                          + W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *phi1_lG(jj,pp) ...
                            *z_prime_lGaussian(pp);
                cs_ji   = cs_ji ...
                          + W_lG(pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_xi_lG(ii,pp);
                %Variables needed for E1
                c_ij    = c_ij ...
                          + W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *phi1_lG(jj,pp) ...
                            *det_Jle(pp);
            end
            As1_ij = 0;
            Bs1_ij = 0;
            Cs1_ij = 0;
            Ds1_ij = 0;
            Es1_ij = 0;
            for kk = 1:3
                cs_jkitr = 0;
                cs_jkitz = 0;
                cs_ijktr = 0;
                cs_ijktz = 0;
                for pp = 1:n_lGaussian_Q
                    cs_jkitr ...
                        = cs_jkitr ...
                          + W_lG(pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_lG(kk,pp) ...
                            *phi1_xi_lG(ii,pp) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                    cs_jkitz ...
                        = cs_jkitz ...
                          + W_lG(pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_lG(kk,pp) ...
                            *phi1_xi_lG(ii,pp) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                    cs_ijktr ...
                        = cs_ijktr ...
                          + W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_xi_lG(kk,pp) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                    cs_ijktz ...
                        = cs_ijktz ...
                          + W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *phi1_lG(jj,pp) ...
                            *phi1_xi_lG(kk,pp) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                end
                As1_ij ...
                    = As1_ij ...
                      + us1(l1_1(ee,kk)) ...
                        *cs_jkitr ...
                      + ws1(l1_1(ee,kk)) ...
                        *cs_jkitz;
                Bs1_ij ...
                    = Bs1_ij ...
                      + cs_jkitr ...
                        *(  a_n       *Nodes_rz(l_1(ee,kk),1) ...
                          - a_n_minus1*Nodes_rz_minus1(l_1(ee,kk),1) ...
                          + a_n_minus2*Nodes_rz_minus2(l_1(ee,kk),1) ...
                         );
                Cs1_ij ...
                    = Cs1_ij ...
                      + cs_jkitz ...
                        *(  a_n       *Nodes_rz(l_1(ee,kk),2) ...
                          - a_n_minus1*Nodes_rz_minus1(l_1(ee,kk),2) ...
                          + a_n_minus2*Nodes_rz_minus2(l_1(ee,kk),2) ...
                         );
                Ds1_ij ...
                    = Ds1_ij ...
                      + cs_ijktr ...
                        *(  a_n       *Nodes_rz(l_1(ee,kk),1) ...
                          - a_n_minus1*Nodes_rz_minus1(l_1(ee,kk),1) ...
                          + a_n_minus2*Nodes_rz_minus2(l_1(ee,kk),1) ...
                         );
                Es1_ij ...
                    = Es1_ij ...
                      + cs_ijktz ...
                        *(  a_n       *Nodes_rz(l_1(ee,kk),2) ...
                          - a_n_minus1*Nodes_rz_minus1(l_1(ee,kk),2) ...
                          + a_n_minus2*Nodes_rz_minus2(l_1(ee,kk),2) ...
                         );
            end
            %Residual contributions
            %Mr
            Mr_far(l_1(ee,ii)-n_v_pre_start_far) ...
                = Mr_far(l_1(ee,ii)-n_v_pre_start_far) ...
                  + 2 ...
                    *delta_t ...
                    *(- pg(l1_1(ee,jj)) ...
                        *c_ijnr ... 
                      + sigma1(l1_1(ee,jj)) ...
                        *cs_jitr ...
                        /Ca ...
                     ) ...
                    /3;
            %Mz
            Mz_far(l_1(ee,ii)-n_v_pre_start_far) ...
                = Mz_far(l_1(ee,ii)-n_v_pre_start_far) ...
                  + 2 ...
                    *delta_t ...
                    *(- pg(l1_1(ee,jj)) ...
                        *c_ijnz ... 
                      + sigma1(l1_1(ee,jj)) ...
                        *cs_jitz ...
                        /Ca ...
                     ) ...
                    /3;
            S1_far(l1_1(ee,ii)-n_spines_pre_start_far) ...
                = S1_far(l1_1(ee,ii)-n_spines_pre_start_far) ...
                  + c_ijtr ...
                    *(  us1(l1_1(ee,jj)) ...
                      - u_far(l_1(ee,jj)-n_v_pre_start_far) ...
                     ) ...
                  + c_ijtz ...
                    *(  ws1(l1_1(ee,jj)) ...
                      - w_far(l_1(ee,jj)-n_v_pre_start_far) ...
                     ) ...
                  + (1+4*Eg*Bg) ...
                    *sigma1(l1_1(ee,jj)) ...
                    *cs_ji ...
                    /(4*Bg);
            K_far(l1_1(ee,ii)-n_spines_pre_start_far) ...
                = K_far(l1_1(ee,ii)-n_spines_pre_start_far) ...
                  + 2 ...
                    *delta_t ...
                    *(  c_ijnr ...
                        *us1(l1_1(ee,jj)) ...
                      + c_ijnz ...
                        *ws1(l1_1(ee,jj)) ...
                     ) ...
                    /3 ...
                  - c_ijnr ...
                    *(  a_n       *Nodes_rz(l_1(ee,jj),1) ...
                      - a_n_minus1*Nodes_rz_minus1(l_1(ee,jj),1) ...
                      + a_n_minus2*Nodes_rz_minus2(l_1(ee,jj),1) ...
                     ) ...
                  - c_ijnz ...
                    *(  a_n       *Nodes_rz(l_1(ee,jj),2) ...
                      - a_n_minus1*Nodes_rz_minus1(l_1(ee,jj),2) ...
                      + a_n_minus2*Nodes_rz_minus2(l_1(ee,jj),2) ...
                     );
            E1_far(l1_1(ee,ii)-n_spines_pre_start_far) ...
                = E1_far(l1_1(ee,ii)-n_spines_pre_start_far) ...
                  + 2 ...
                    *delta_t ...
                    *(  c_ijnr ...
                        *(  u_far(l_1(ee,jj)-n_v_pre_start_far) ...
                          - us1(l1_1(ee,jj)) ...  
                         ) ...
                      + c_ijnz ...
                        *(  w_far(l_1(ee,jj)-n_v_pre_start_far) ...
                          - ws1(l1_1(ee,jj)) ...  
                         ) ...
                     ) ...
                    /3 ...
                  + c_ij ...
                    *Lg ...
                    *(  a_n       *rhos1(l1_1(ee,jj)) ...
                      - a_n_minus1*rhos1_minus1(l1_1(ee,jj)) ...
                      + a_n_minus2*rhos1_minus2(l1_1(ee,jj)) ...
                     ) ...
                  + Lg ...
                    *rhos1(l1_1(ee,jj)) ...
                    *(- 2 ...
                        *delta_t ...
                        *As1_ij ...
                        /3 ...
                      + Bs1_ij ...
                      + Cs1_ij ...
                      + Ds1_ij ...
                      + Es1_ij ...
                     );
%                   - Fg ...
%                     *rhos1(l1_1(ee,jj)) ...
%                     *c_ij;
            D1_far(l1_1(ee,ii)-n_spines_pre_start_far) ...
                = D1_far(l1_1(ee,ii)-n_spines_pre_start_far) ...
                  + c_ij ...
                    *(  2 ...
                        *delta_t ...
                        *rhos1(l1_1(ee,jj)) ...
                        /3 ...
                      + Tg ...
                        *(  a_n       *rhos1(l1_1(ee,jj)) ...
                          - a_n_minus1*rhos1_minus1(l1_1(ee,jj)) ...
                          + a_n_minus2*rhos1_minus2(l1_1(ee,jj)) ...
                         ) ...
                     ) ...
                  + Tg ...
                    *rhos1(l1_1(ee,jj)) ...
                    *(- 2 ...
                        *delta_t ...
                        *As1_ij ...
                        /3 ...
                      + Bs1_ij ...
                      + Cs1_ij ...
                      + Ds1_ij ...
                      + Es1_ij ...
                     );
        end
        for jj = 1:6
            cr_ijnr = 0;
            cr_ijnz = 0;
            cz_ijnr = 0;
            cz_ijnz = 0;
            for pp = 1:n_lGaussian_Q
                cr_ijnr = cr_ijnr ...
                          - alpha_1 ...
                            *W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *Tmat1{pp}(jj,:)*(z_e-min_z_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                cr_ijnz = cr_ijnz ...
                          + alpha_1 ...
                            *W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *Tmat1{pp}(jj,:)*(z_e-min_z_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
                cz_ijnr = cz_ijnr ...
                          + alpha_1 ...
                            *W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *Tmat1{pp}(jj,:)*(r_e-min_r_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                cz_ijnz = cz_ijnz ...
                          - alpha_1 ...
                            *W_lG(pp) ...
                            *phi1_lG(ii,pp) ...
                            *Tmat1{pp}(jj,:)*(r_e-min_r_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
            end
            Mr_far(l_1(ee,ii)-n_v_pre_start_far) ...
                = Mr_far(l_1(ee,ii)-n_v_pre_start_far) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_far(l(LE_to_TE_1(ee),jj)-n_v_pre_start_far) ...
                        *cr_ijnr ...
                      + w_far(l(LE_to_TE_1(ee),jj)-n_v_pre_start_far) ...
                        *cr_ijnz ...
                     ) ...
                    /3;
            Mz_far(l_1(ee,ii)-n_v_pre_start_far) ...
                = Mz_far(l_1(ee,ii)-n_v_pre_start_far) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_far(l(LE_to_TE_1(ee),jj)-n_v_pre_start_far) ...
                        *cz_ijnr ...
                      + w_far(l(LE_to_TE_1(ee),jj)-n_v_pre_start_far) ...
                        *cz_ijnz ...
                     ) ...
                    /3;
        end
    end
end

%Apex contributions
Mr_far(apex-n_v_pre_start_far) ...
    = Mr_far(apex-n_v_pre_start_far) ... 
      + 2 ...
        *delta_t ...
        *sigma1(n_spines) ...
        *(sin(theta_a)) ...
        /(3*Ca);
Mz_far(apex-n_v_pre_start_far) ...
    = Mz_far(apex-n_v_pre_start_far) ...
      + 2 ...
        *delta_t ...
        *sigma1(n_spines) ...
        *(-cos(theta_a)) ...
        /(3*Ca);

%Apex contributions for slip-between-free-surface-and-solid
%equation
S1_far(a1-n_spines_pre_start_far) ...
    = S1_far(a1-n_spines_pre_start_far) ...
      - (1+4*Eg*Bg) ...
        *sigma1(a1) ...
        /(4*Bg);

%Strong form of the state equation on the far-field 
%free surface
for ii = n_spines_near:n_spines
    T1_far(ii-n_spines_pre_start_far) ...
        = sigma1(ii) + Cg*(rhos1(ii)-1);
end

%Solid surface far field contributions
for ee = n2_el_near+1:n2_el%looping over elements
    r_le = Nodes_rz(l_2(ee,:),1);
    z_le = Nodes_rz(l_2(ee,:),2);
    min_r_le = min(r_le);
    min_z_le = min(z_le);
    r_e = Nodes_rz(l(LE_to_TE_2(ee),:),1);
    z_e = Nodes_rz(l(LE_to_TE_2(ee),:),2);
    min_r_e = min(r_e);
    min_z_e = min(z_e);
    for pp = 1:n_lGaussian_Q
        %find r' and z' at each Gaussian quadrature point
        r_prime_lGaussian(pp) = (phi2_eta_lG(:,pp)')*(r_le-min_r_le);
        z_prime_lGaussian(pp) = (phi2_eta_lG(:,pp)')*(z_le-min_z_le);  
        normaliser = max(abs(r_prime_lGaussian(pp)), ...
                         abs(z_prime_lGaussian(pp)));
        r_prime_lGaussian_aux = r_prime_lGaussian(pp)/normaliser;
        z_prime_lGaussian_aux = z_prime_lGaussian(pp)/normaliser;
        %find the determinant of the Jacobian of the isoparametric 
        %map at each Gaussian quadrature point
        det_Jle(pp) = sqrt(  r_prime_lGaussian_aux^2 ...
                           + z_prime_lGaussian_aux^2 ...
                          ) ...
                      *normaliser;
        det_Je(pp) = (r_e'-min_r_e)*Tmat2{pp}*(z_e-min_z_e);
    end
    for ii = 1:3 %looping over local nodes to find the contribution to 
        %the respective eq
        d_i = 0;
        for pp = 1:n_lGaussian_Q
            d_i = d_i ...
                  + W_lG(pp) ...
                    *phi2_lG(ii,pp) ...
                    *det_Jle(pp);
        end
%         E2_far(l2_2(ee,ii)-n_spines_pre_start_far) ...
%             = E2_far(l2_2(ee,ii)-n_spines_pre_start_far) ...
%               + Fs ...
%                 *Ds ...
%                 *d_i;
        D2_far(l2_2(ee,ii)-n_spines_pre_start_far) ...
            = D2_far(l2_2(ee,ii)-n_spines_pre_start_far) ...
              - 2 ...
                *delta_t ...
                *Ds ...
                *d_i ...
                /3;
        for jj = 1:3%looping over local nodes to calculate inner 
            %product of basis function by basis function ii
            d_ijtrtr = 0;
            d_ijtrtz = 0;
            d_ijtztz = 0;
            d_ijnr = 0;
            d_ijnz = 0;
            d_ijtr = 0;
            d_ijtz = 0;
            ds_ijtr = 0;
            ds_ijtz = 0;
            ds_ji = 0;
            d_ij = 0;
            for pp = 1:n_lGaussian_Q
                d_ijtrtr = d_ijtrtr ...
                           + W_lG(pp) ...
                             *r_prime_lGaussian(pp) ...
                             *r_prime_lGaussian(pp) ...
                             *phi2_lG(ii,pp) ...
                             *phi2_lG(jj,pp) ...
                             /det_Jle(pp);
                d_ijtrtz = d_ijtrtz ...
                           + W_lG(pp) ...
                             *r_prime_lGaussian(pp) ...
                             *z_prime_lGaussian(pp) ...
                             *phi2_lG(ii,pp) ...
                             *phi2_lG(jj,pp) ...
                             /det_Jle(pp);
                d_ijtztz = d_ijtztz ...
                           + W_lG(pp) ...
                             *z_prime_lGaussian(pp) ...
                             *z_prime_lGaussian(pp) ...
                             *phi2_lG(ii,pp) ...
                             *phi2_lG(jj,pp) ...
                             /det_Jle(pp);
                d_ijnr   = d_ijnr ...
                           - alpha_2 ...
                             *W_lG(pp) ...
                             *phi2_lG(ii,pp) ...
                             *phi2_lG(jj,pp) ...
                             *z_prime_lGaussian(pp);
                d_ijnz   = d_ijnz ...
                           + alpha_2 ...
                             *W_lG(pp) ...
                             *phi2_lG(ii,pp) ...
                             *phi2_lG(jj,pp) ...
                             *r_prime_lGaussian(pp);
                d_ijtr = d_ijtr ...
                         + W_lG(pp) ...
                           *phi2_lG(ii,pp) ...
                           *phi2_lG(jj,pp) ...
                           *r_prime_lGaussian(pp);
                d_ijtz = d_ijtz ...
                         + W_lG(pp) ...
                           *phi2_lG(ii,pp) ...
                           *phi2_lG(jj,pp) ...
                           *z_prime_lGaussian(pp);
                ds_ijtr = ds_ijtr ...
                          + W_lG(pp) ...
                            *phi2_lG(ii,pp) ...
                            *phi2_eta_lG(jj,pp) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                ds_ijtz = ds_ijtz ...
                          + W_lG(pp) ...
                            *phi2_lG(ii,pp) ...
                            *phi2_eta_lG(jj,pp) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                ds_ji = ds_ji ...
                        + W_lG(pp) ...
                          *phi2_lG(jj,pp) ...
                          *phi2_eta_lG(ii,pp);
                d_ij = d_ij ...
                       + W_lG(pp) ...
                         *phi2_lG(ii,pp) ...
                         *phi2_lG(jj,pp) ...
                         *det_Jle(pp);
            end
            As2_ij = 0;
            Bs2_ij = 0;
            Cs2_ij = 0;
            Ds2_ij = 0;
            Es2_ij = 0;
            for kk = 1:3
                ds_jkitr = 0;
                ds_jkitz = 0;
                ds_ijktr = 0;
                ds_ijktz = 0;
                for pp = 1:n_lGaussian_Q
                    ds_jkitr ...
                        = ds_jkitr ...
                          + W_lG(pp) ...
                            *phi2_lG(jj,pp) ...
                            *phi2_lG(kk,pp) ...
                            *phi2_eta_lG(ii,pp) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                    ds_jkitz ...
                        = ds_jkitz ...
                          + W_lG(pp) ...
                            *phi2_lG(jj,pp) ...
                            *phi2_lG(kk,pp) ...
                            *phi2_eta_lG(ii,pp) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                    ds_ijktr ...
                        = ds_ijktr ...
                          + W_lG(pp) ...
                            *phi2_lG(ii,pp) ...
                            *phi2_lG(jj,pp) ...
                            *phi2_eta_lG(kk,pp) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                    ds_ijktz ...
                        = ds_ijktz ...
                          + W_lG(pp) ...
                            *phi2_lG(ii,pp) ...
                            *phi2_lG(jj,pp) ...
                            *phi2_eta_lG(kk,pp) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Jle(pp);
                end
                As2_ij ...
                    = As2_ij ...
                      + us2(l2_2(ee,kk)) ...
                        *ds_jkitr ...
                      + ws2(l2_2(ee,kk)) ...
                        *ds_jkitz;
                Bs2_ij ...
                    = Bs2_ij ...
                      + ds_jkitr ...
                        *(  a_n       *Nodes_rz(l_2(ee,kk),1) ...
                          - a_n_minus1*Nodes_rz_minus1(l_2(ee,kk),1) ...
                          + a_n_minus2*Nodes_rz_minus2(l_2(ee,kk),1) ...
                         );
                Cs2_ij ...
                    = Cs2_ij ...
                      + ds_jkitz ...
                        *(  a_n       *Nodes_rz(l_2(ee,kk),2) ...
                          - a_n_minus1*Nodes_rz_minus1(l_2(ee,kk),2) ...
                          + a_n_minus2*Nodes_rz_minus2(l_2(ee,kk),2) ...
                         );
                Ds2_ij ...
                    = Ds2_ij ...
                      + ds_ijktr ...
                        *(  a_n       *Nodes_rz(l_2(ee,kk),1) ...
                          - a_n_minus1*Nodes_rz_minus1(l_2(ee,kk),1) ...
                          + a_n_minus2*Nodes_rz_minus2(l_2(ee,kk),1) ...
                         );
                Es2_ij ...
                    = Es2_ij ...
                      + ds_ijktz ...
                        *(  a_n       *Nodes_rz(l_2(ee,kk),2) ...
                          - a_n_minus1*Nodes_rz_minus1(l_2(ee,kk),2) ...
                          + a_n_minus2*Nodes_rz_minus2(l_2(ee,kk),2) ...
                         );
            end
            %Residual contributions
            Mr_far(l_2(ee,ii)-n_v_pre_start_far) ...
                = Mr_far(l_2(ee,ii)-n_v_pre_start_far) ...
                  + 2 ...
                    *delta_t ...
                    *lambda2(l2_2(ee,jj)) ...
                    *d_ijnr ...
                    /3 ...
                  + (1+4*Be*Ca*Es) ...
                    *delta_t ...
                    *(  u_far(l_2(ee,jj)-n_v_pre_start_far) ...
                        *d_ijtrtr ...
                      + w_far(l_2(ee,jj)-n_v_pre_start_far) ...
                        *d_ijtrtz ...
                     ) ...
                    /(6*Ca*Es) ...
                  + (1-4*Be*Ca*Es) ...
                    *delta_t ...
                    *(  u_s(l2_2(ee,jj)) ...
                        *d_ijtrtr ...
                      + w_s(l2_2(ee,jj)) ...
                        *d_ijtrtz ...
                     ) ...
                    /(6*Ca*Es) ...
                  - delta_t ...
                    *(  us2(l2_2(ee,jj)) ...
                        *d_ijtrtr ...
                      + ws2(l2_2(ee,jj)) ...
                        *d_ijtrtz ...
                     ) ...
                    /(3*Ca*Es);
            Mz_far(l_2(ee,ii)-n_v_pre_start_far) ...
                = Mz_far(l_2(ee,ii)-n_v_pre_start_far) ...
                  + 2 ...
                    *delta_t ...
                    *lambda2(l2_2(ee,jj)) ...
                    *d_ijnz ...
                    /3 ...
                  + (1+4*Be*Ca*Es) ...
                    *delta_t ...
                    *(  u_far(l_2(ee,jj)-n_v_pre_start_far) ...
                        *d_ijtrtz ...
                      + w_far(l_2(ee,jj)-n_v_pre_start_far) ...
                        *d_ijtztz ...
                     ) ...
                    /(6*Ca*Es) ...
                  + (1-4*Be*Ca*Es) ...
                    *delta_t ...
                    *(  u_s(l2_2(ee,jj)) ...
                        *d_ijtrtz ...
                      + w_s(l2_2(ee,jj)) ...
                        *d_ijtztz ...
                     ) ...
                    /(6*Ca*Es) ...
                  - delta_t ...
                    *(  us2(l2_2(ee,jj)) ...
                        *d_ijtrtz ...
                      + ws2(l2_2(ee,jj)) ...
                        *d_ijtztz ...
                     ) ...
                    /(3*Ca*Es);
            S2_far(l2_2(ee,ii)-n_spines_pre_start_far) ...
                = S2_far(l2_2(ee,ii)-n_spines_pre_start_far) ...
                  + d_ijtr ...
                    *(  us2(l2_2(ee,jj)) ...
                      - u_far(l_2(ee,jj)-n_v_pre_start_far)/2 ...
                      - u_s(l2_2(ee,jj))/2 ...
                     ) ...
                  + d_ijtz ...
                    *(  ws2(l2_2(ee,jj)) ...
                      - w_far(l_2(ee,jj)-n_v_pre_start_far)/2 ...
                      - w_s(l2_2(ee,jj))/2 ...
                     ) ...
                  + Es ...
                    *sigma2(l2_2(ee,jj)) ...
                    *ds_ji;
            I_far(l2_2(ee,ii)-n_spines_pre_start_far) ...
                = I_far(l2_2(ee,ii)-n_spines_pre_start_far) ...
                  + d_ijnr ...
                    *(  us2(l2_2(ee,jj)) ...
                      - u_s(l2_2(ee,jj)) ...
                     )...
                  + d_ijnz ...
                    *(  ws2(l2_2(ee,jj)) ...
                      - w_s(l2_2(ee,jj)) ...
                     );
            E2_far(l2_2(ee,ii)-n_spines_pre_start_far) ...
                = E2_far(l2_2(ee,ii)-n_spines_pre_start_far) ...
                  + 2 ...
                    *delta_t ...
                    *(  d_ijnr ...
                        *(  u_far(l_2(ee,jj)-n_v_pre_start_far) ...
                          - us2(l2_2(ee,jj)) ...
                         ) ...
                      + d_ijnz ...
                        *(  w_far(l_2(ee,jj)-n_v_pre_start_far) ...
                          - ws2(l2_2(ee,jj)) ...
                         ) ...
                     ) ...
                    /3 ...
                  + d_ij ...
                    *Ls ...
                    *(  a_n       *rhos2(l2_2(ee,jj)) ...
                      - a_n_minus1*rhos2_minus1(l2_2(ee,jj)) ...
                      + a_n_minus2*rhos2_minus2(l2_2(ee,jj)) ...
                     ) ...
                  + Ls ...
                    *rhos2(l2_2(ee,jj)) ...
                    *(- 2 ...
                        *delta_t ...
                        *As2_ij ...
                        /3 ...
                      + Bs2_ij ...
                      + Cs2_ij ...
                      + Ds2_ij ...
                      + Es2_ij ...
                     );
%                   - Fs ...
%                     *rhos2(l2_2(ee,jj)) ...
%                     *d_ij;
            D2_far(l2_2(ee,ii)-n_spines_pre_start_far) ...
                = D2_far(l2_2(ee,ii)-n_spines_pre_start_far) ...
                  + d_ij ...
                    *(  2 ...
                        *delta_t ...
                        *rhos2(l2_2(ee,jj)) ...
                        /3 ...
                      + Ts ...
                        *(  a_n       *rhos2(l2_2(ee,jj)) ...
                          - a_n_minus1*rhos2_minus1(l2_2(ee,jj)) ...
                          + a_n_minus2*rhos2_minus2(l2_2(ee,jj)) ...
                         ) ...
                     ) ...
                  + Ts ...
                    *rhos2(l2_2(ee,jj)) ...
                    *(- 2 ...
                        *delta_t ...
                        *As2_ij ...
                        /3 ...
                      + Bs2_ij ...
                      + Cs2_ij ...
                      + Ds2_ij ...
                      + Es2_ij ...
                     );
        end
        for jj = 1:6
            dr_ijnr = 0;
            dr_ijnz = 0;
            dz_ijnr = 0;
            dz_ijnz = 0;
            for pp = 1:n_lGaussian_Q
                dr_ijnr = dr_ijnr ...
                          - alpha_2 ...
                            *W_lG(pp) ...
                            *phi2_lG(ii,pp) ...
                            *Tmat2{pp}(jj,:)*(z_e-min_z_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                dr_ijnz = dr_ijnz ...
                          + alpha_2 ...
                            *W_lG(pp) ...
                            *phi2_lG(ii,pp) ...
                            *Tmat2{pp}(jj,:)*(z_e-min_z_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
                dz_ijnr = dz_ijnr ...
                          + alpha_2 ...
                            *W_lG(pp) ...
                            *phi2_lG(ii,pp) ...
                            *Tmat2{pp}(jj,:)*(r_e-min_r_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                dz_ijnz = dz_ijnz ...
                          - alpha_2 ...
                            *W_lG(pp) ...
                            *phi2_lG(ii,pp) ...
                            *Tmat2{pp}(jj,:)*(r_e-min_r_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
            end
            Mr_far(l_2(ee,ii)-n_v_pre_start_far) ...
                = Mr_far(l_2(ee,ii)-n_v_pre_start_far) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_far(l(LE_to_TE_2(ee),jj)-n_v_pre_start_far) ...
                        *dr_ijnr ...
                      + w_far(l(LE_to_TE_2(ee),jj)-n_v_pre_start_far) ...
                        *dr_ijnz ...
                     ) ...
                    /3;
            Mz_far(l_2(ee,ii)-n_v_pre_start_far) ...
                = Mz_far(l_2(ee,ii)-n_v_pre_start_far) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_far(l(LE_to_TE_2(ee),jj)-n_v_pre_start_far) ...
                        *dz_ijnr ...
                      + w_far(l(LE_to_TE_2(ee),jj)-n_v_pre_start_far) ...
                        *dz_ijnz ...
                     ) ...
                    /3;
        end
    end
end

%Apex contribution to S2
S2_far(o2-n_spines_pre_start_far) ...
    = S2_far(o2-n_spines_pre_start_far) ...
      - Es ...
        *sigma2(o2);

%State equation in the far field
for ii = n_spines_near:n_spines
    T2_far(ii-n_spines_pre_start_far) ...
        = sigma2(ii) + Cs*(rhos2(ii)-1);
end

%Adding the inflow-surface boundary contributions to the momentum eqns
for ee = 1:n3_el%looping over elements
    r_le = Nodes_rz(l_3(ee,:),1);
    z_le = Nodes_rz(l_3(ee,:),2);
    min_r_le = min(r_le);
    min_z_le = min(z_le);
    r_e = Nodes_rz(l(LE_to_TE_3(ee),:),1);
    z_e = Nodes_rz(l(LE_to_TE_3(ee),:),2);
    min_r_e = min(r_e);
    min_z_e = min(z_e);
    for pp = 1:n_lGaussian_Q
        %find r' and z' at each Gaussian quadrature point
        r_prime_lGaussian(pp) = (phi3_xi_lG(:,pp)')*(r_le-min_r_le);
        z_prime_lGaussian(pp) = (phi3_xi_lG(:,pp)')*(z_le-min_z_le); 
        normaliser = max(abs(r_prime_lGaussian(pp)), ...
                         abs(z_prime_lGaussian(pp)));
        r_prime_lGaussian_aux = r_prime_lGaussian(pp)/normaliser;
        z_prime_lGaussian_aux = z_prime_lGaussian(pp)/normaliser;
        %find the determinant of the Jacobian of the isoparametric 
        %map at each Gaussian quadrature point  
        det_Jle(pp) = sqrt(  r_prime_lGaussian_aux^2 ...
                           + z_prime_lGaussian_aux^2 ...
                          ) ...
                      *normaliser;
        det_Je(pp) = (r_e'-min_r_e)*Tmat3{pp}*(z_e-min_z_e);
    end
    for ii = 1:3 %looping over local nodes to find the contribution to 
        %the respective eq
%         for jj = 1:3%looping over local nodes to calculate inner 
%             %product of basis function by basis function ii
%             f_ijtr = 0;
%             f_ijtz = 0;
%             f_ijnr = 0;
%             f_ijnz = 0;
%             for pp = 1:n_lGaussian_Q
%                 f_ijtr = f_ijtr ...
%                          + W_lG(pp) ...
%                            *r_prime_lGaussian(pp) ...
%                            *phi3_lG(ii,pp) ...
%                            *phi3_lG(jj,pp);
%                 f_ijtz = f_ijtz ...
%                          + W_lG(pp) ...
%                            *z_prime_lGaussian(pp) ...
%                            *phi3_lG(ii,pp) ...
%                            *phi3_lG(jj,pp);
%                 f_ijnr = f_ijnr ...
%                          - alpha_3 ...
%                            *W_lG(pp) ...
%                            *z_prime_lGaussian(pp) ...
%                            *phi3_lG(ii,pp) ...
%                            *phi3_lG(jj,pp);
%                 f_ijnz = f_ijnz ...
%                          + alpha_3 ...
%                            *W_lG(pp) ...
%                            *r_prime_lGaussian(pp) ...
%                            *phi3_lG(ii,pp) ...
%                            *phi3_lG(jj,pp);
%             end
%             %residual contributions
%             Mr_far(l_3(ee,ii)-n_v_pre_start_far) ...
%                 = Mr_far(l_3(ee,ii)-n_v_pre_start_far) ...
%                   + 2 ...
%                     *delta_t ...
%                     *(  f_ijnr ...
%                         *lambda3(l3_3(ee,jj)) ...
%                       + f_ijtr ...
%                         * gamma3(l3_3(ee,jj)) ...
%                      ) ...
%                     /3;
%             Mz_far(l_3(ee,ii)-n_v_pre_start_far) ...
%                 = Mz_far(l_3(ee,ii)-n_v_pre_start_far) ...
%                   + 2 ...
%                     *delta_t ...
%                     *(  f_ijnz ...
%                         *lambda3(l3_3(ee,jj)) ...
%                       + f_ijtz ...
%                         * gamma3(l3_3(ee,jj)) ...
%                      ) ...
%                     /3;
%         end
        for jj = 1:6
            fr_ijnr = 0;
            fr_ijnz = 0;
            fz_ijnr = 0;
            fz_ijnz = 0;
            for pp = 1:n_lGaussian_Q
                fr_ijnr = fr_ijnr ...
                          - alpha_3 ...
                            *W_lG(pp) ...
                            *phi3_lG(ii,pp) ...
                            *Tmat3{pp}(jj,:)*(z_e-min_z_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                fr_ijnz = fr_ijnz ...
                          + alpha_3 ...
                            *W_lG(pp) ...
                            *phi3_lG(ii,pp) ...
                            *Tmat3{pp}(jj,:)*(z_e-min_z_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
                fz_ijnr = fz_ijnr ...
                          + alpha_3 ...
                            *W_lG(pp) ...
                            *phi3_lG(ii,pp) ...
                            *Tmat3{pp}(jj,:)*(r_e-min_r_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                fz_ijnz = fz_ijnz ...
                          - alpha_3 ...
                            *W_lG(pp) ...
                            *phi3_lG(ii,pp) ...
                            *Tmat3{pp}(jj,:)*(r_e-min_r_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
            end
            Mr_far(l_3(ee,ii)-n_v_pre_start_far) ...
                = Mr_far(l_3(ee,ii)-n_v_pre_start_far) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_far(l(LE_to_TE_3(ee),jj)-n_v_pre_start_far) ...
                        *fr_ijnr ...
                      + w_far(l(LE_to_TE_3(ee),jj)-n_v_pre_start_far) ...
                        *fr_ijnz ...
                     ) ...
                    /3;
            Mz_far(l_3(ee,ii)-n_v_pre_start_far) ...
                = Mz_far(l_3(ee,ii)-n_v_pre_start_far) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_far(l(LE_to_TE_3(ee),jj)-n_v_pre_start_far) ...
                        *fz_ijnr ...
                      + w_far(l(LE_to_TE_3(ee),jj)-n_v_pre_start_far) ...
                        *fz_ijnz ...
                     ) ...
                    /3;
        end
    end
end

%Adding contributions on the separatix on the far field equations
for ee = 1:n5_el%looping over elements
    r_le = Nodes_rz(l_5(ee,:),1);
    z_le = Nodes_rz(l_5(ee,:),2);
    min_r_le = min(r_le);
    min_z_le = min(z_le);
    r_e = Nodes_rz(l(LE_to_TE_5(ee),:),1);
    z_e = Nodes_rz(l(LE_to_TE_5(ee),:),2);
    min_r_e = min(r_e);
    min_z_e = min(z_e);
    for pp = 1:n_lGaussian_Q
        %find r' and z' at each Gaussian quadrature point
        r_prime_lGaussian(pp) = (phi5_eta_lG(:,pp)')*(r_le-min_r_le);
        z_prime_lGaussian(pp) = (phi5_eta_lG(:,pp)')*(z_le-min_z_le); 
        normaliser = max(abs(r_prime_lGaussian(pp)), ...
                         abs(z_prime_lGaussian(pp)));
        r_prime_lGaussian_aux = r_prime_lGaussian(pp)/normaliser;
        z_prime_lGaussian_aux = z_prime_lGaussian(pp)/normaliser;
        %find the determinant of the Jacobian of the isoparametric 
        %map at each Gaussian quadrature point  
        det_Jle(pp) = sqrt(  r_prime_lGaussian_aux^2 ...
                           + z_prime_lGaussian_aux^2 ...
                          ) ...
                      *normaliser;
        det_Je(pp) = (r_e'-min_r_e)*Tmat5{pp}*(z_e-min_z_e);
    end
    for ii = 1:3 %looping over local nodes to find the contribution to 
        %the respective eq
        for jj = 1:6
            er_ijnr = 0;
            er_ijnz = 0;
            ez_ijnr = 0;
            ez_ijnz = 0;
            for pp = 1:n_lGaussian_Q
                er_ijnr = er_ijnr ...
                          - alpha_5 ...
                            *W_lG(pp) ...
                            *phi5_lG(ii,pp) ...
                            *Tmat5{pp}(jj,:)*(z_e-min_z_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                er_ijnz = er_ijnz ...
                          + alpha_5 ...
                            *W_lG(pp) ...
                            *phi5_lG(ii,pp) ...
                            *Tmat5{pp}(jj,:)*(z_e-min_z_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
                ez_ijnr = ez_ijnr ...
                          + alpha_5 ...
                            *W_lG(pp) ...
                            *phi5_lG(ii,pp) ...
                            *Tmat5{pp}(jj,:)*(r_e-min_r_e) ...
                            *z_prime_lGaussian(pp) ...
                            /det_Je(pp);
                ez_ijnz = ez_ijnz ...
                          - alpha_5 ...
                            *W_lG(pp) ...
                            *phi5_lG(ii,pp) ...
                            *Tmat5{pp}(jj,:)*(r_e-min_r_e) ...
                            *r_prime_lGaussian(pp) ...
                            /det_Je(pp);
            end
            Mr_far(l_5(ee,ii)-n_v_pre_start_far) ...
                = Mr_far(l_5(ee,ii)-n_v_pre_start_far) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_far(l(LE_to_TE_5(ee),jj)-n_v_pre_start_far) ...
                        *er_ijnr ...
                      + w_far(l(LE_to_TE_5(ee),jj)-n_v_pre_start_far) ...
                        *er_ijnz ...
                     ) ...
                    /3;
            Mz_far(l_5(ee,ii)-n_v_pre_start_far) ...
                = Mz_far(l_5(ee,ii)-n_v_pre_start_far) ...
                  - 2 ...
                    *delta_t ...
                    *(  u_far(l(LE_to_TE_5(ee),jj)-n_v_pre_start_far) ...
                        *ez_ijnr ...
                      + w_far(l(LE_to_TE_5(ee),jj)-n_v_pre_start_far) ...
                        *ez_ijnz ...
                     ) ...
                    /3;
        end
    end
end

%Young's equation
Y = sigma2(c2) + sigma1(c1)*cos(theta_c) - So;

%axisymmetric pressure limit
Cp = p(press_lim_node_solid)-p(press_lim_node_gas);

R = zeros((n_Mr_near+n_Mz_near+n_C_near ...
           +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
           +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
           +2*n_v_sep ...
           +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
           +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
           +n_S1_far-1+n_K_far-1+n_E1_far-1+n_D1_far-1+n_T1_far-1 ...
           +2),1);

%conditioned residual vector 
%Mr_near residuals
R(1 ...
  :n_Mr_near) ...
    = Mr_near(Mr_nodes_near);
    %Adding the contribution from the far field elements that lie on the
    %separatrix
R(n_Mr_near-n_v_sep+1 ...
  :n_Mr_near) ...
    = R(n_Mr_near-n_v_sep+1 ...
        :n_Mr_near) ... 
      + Mr_far(1:n_v_sep);  
%Mz_near residuals
R(n_Mr_near+1 ...
  :n_Mr_near+n_Mz_near)  ...
    = Mz_near(Mz_nodes_near);
    %Adding the contribution from the far field elements that lie on the
    %separatrix
R(n_Mr_near+n_Mz_near-n_v_sep+1 ...
  :n_Mr_near+n_Mz_near) ...
    = R(n_Mr_near+n_Mz_near-n_v_sep+1 ...
        :n_Mr_near+n_Mz_near) ... 
      + Mz_far(1:n_v_sep); 
%C_near residuals
R(n_Mr_near+n_Mz_near+1 ...
  :n_Mr_near+n_Mz_near+n_C_near) ...
    = C_near(C_nodes_near);
    %Adding the terms form the far field at the separatrix
    R(n_Mr_near+n_Mz_near+n_C_near-n_p_sep+1 ...
       :n_Mr_near+n_Mz_near+n_C_near) ...
        = R(n_Mr_near+n_Mz_near+n_C_near-n_p_sep+1 ...
            :n_Mr_near+n_Mz_near+n_C_near) ...
          + C_far(1:n_p_sep); 
%S2_near residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +1) ...
  :(n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near)) ...
    = S2_near(S2_nodes_near);     
      %Adding the contribution of the far-side half of the
      %residual at the joint on the separatrix
   R((n_Mr_near+n_Mz_near+n_C_near ...
       +n_S2_near)) ...
       = R((n_Mr_near+n_Mz_near+n_C_near ...
            +n_S2_near)) ...
         + S2_far(1);
%I_near residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near)) ...
    = I_near(I_nodes_near);
      %Adding the contribution of the far-side half of the
      %residual at the joint on the separatrix
    R((n_Mr_near+n_Mz_near+n_C_near ...
        +n_S2_near+n_I_near)) ...
        = R((n_Mr_near+n_Mz_near+n_C_near ...
              +n_S2_near+n_I_near)) ...
          + I_far(1);
%E2_near residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+n_I_near+1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near+n_E2_near)) ...
    = E2_near(E2_nodes_near);
      %Adding the contribution of the far-side half of the
      %residual at the joint on the separatrix
    R((n_Mr_near+n_Mz_near+n_C_near ...
        +n_S2_near+n_I_near+n_E2_near)) ...
        = R((n_Mr_near+n_Mz_near+n_C_near ...
             +n_S2_near+n_I_near+n_E2_near)) ...
          + E2_far(1);
%D2_near residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+1) ...
  :(n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+n_I_near+n_E2_near+n_D2_near)) ...
    = D2_near(D2_nodes_near);
      %Adding the contribution of the far-side half of the
      %residual at the joint on the separatrix
    R((n_Mr_near+n_Mz_near+n_C_near ...
       +n_S2_near+n_I_near+n_E2_near+n_D2_near)) ...
        = R((n_Mr_near+n_Mz_near+n_C_near ...
             +n_S2_near+n_I_near+n_E2_near+n_D2_near)) ...
          + D2_far(1);
%T2_near "residuals"
R((n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+n_I_near+n_E2_near+n_D2_near+1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near)) ...
    = T2_near(T2_nodes_near);
%S1_near residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +1) ...
  :(n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
    +n_S1_near)) ...
    = S1_near(S1_nodes_near);
      %Adding the contribution of the far-side half of the
      %residual at the joint on the separatrix
    R((n_Mr_near+n_Mz_near+n_C_near ...
       +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
       +n_S1_near)) ...
        = R((n_Mr_near+n_Mz_near+n_C_near ...
             +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
             +n_S1_near)) ...
          + S1_far(1);
%K_near residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
     +n_S1_near+n_K_near)) ...
    = K_near(K_nodes_near); 
      %Adding the contribution of the far-side half of the residual
          %at the joint on the separatrix
    R((n_Mr_near+n_Mz_near+n_C_near ...
       +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
       +n_S1_near+n_K_near)) ...
        = R((n_Mr_near+n_Mz_near+n_C_near ...
             +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
             +n_S1_near+n_K_near)) ...
          + K_far(1); 
%E1_near residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
     +n_S1_near+n_K_near+n_E1_near)) ...
    = E1_near(E1_nodes_near); 
      %Adding the contribution of the far-side half of the residual
          %at the joint on the separatrix
    R((n_Mr_near+n_Mz_near+n_C_near ...
       +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
       +n_S1_near+n_K_near+n_E1_near)) ...
        = R((n_Mr_near+n_Mz_near+n_C_near ...
             +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
             +n_S1_near+n_K_near+n_E1_near)) ...
          + E1_far(1);   
%D1_near residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
     +n_S1_near+n_K_near+n_E1_near+n_D1_near)) ...
    = D1_near(D1_nodes_near); 
      %Adding the contribution of the far-side half of the residual
          %at the joint on the separatrix
    R((n_Mr_near+n_Mz_near+n_C_near ...
       +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
       +n_S1_near+n_K_near+n_E1_near+n_D1_near)) ...
        = R((n_Mr_near+n_Mz_near+n_C_near ...
             +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
             +n_S1_near+n_K_near+n_E1_near+n_D1_near)) ...
          + D1_far(1);      
%T1_near residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
     +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near)) ...
    = T1_near(T1_nodes_near);         
%Cu residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
     +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
     +n_v_sep)) ...
    = Cu;
%Cw residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +n_v_sep+1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
     +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
     +2*n_v_sep)) ...
    = Cw;
%Far field equations
%Mr_far residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
     +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
     +2*n_v_sep ...
     +n_Mr_far-n_v_sep)) ...
    = Mr_far(Mr_nodes_far(n_v_sep+1:end)-n_v_pre_start_far);
%Mz_far residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
     +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
     +2*n_v_sep ...
     +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep)) ...
    = Mz_far(Mz_nodes_far(n_v_sep+1:end)-n_v_pre_start_far);
%C_far residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
     +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
     +2*n_v_sep ...
     +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep)) ...
    = C_far(C_nodes_far(n_p_sep+1:end)-n_p_pre_start_far);
%S2_far residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
   +1) ...
  :(n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
    +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
    +2*n_v_sep ...
    +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
    +n_S2_far-1)) ...
    = S2_far(S2_nodes_far-n_spines_pre_start_far);
%I_far residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
   +n_S2_far-1+1) ...
 :(n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
   +n_S2_far-1+n_I_far-1)) ...
    = I_far(I_nodes_far-n_I_near+1);
%E2_far residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
   +n_S2_far-1+n_I_far-1+1) ...
  :(n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
    +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
    +2*n_v_sep ...
    +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
    +n_S2_far-1+n_I_far-1+n_E2_far-1)) ...
    = E2_far(E2_nodes_far-n_spines_pre_start_far);
%D2_far residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
   +n_S2_far-1+n_I_far-1+n_E2_far-1+1) ...
  :(n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
    +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
    +2*n_v_sep ...
    +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
    +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1)) ...
    = D2_far(D2_nodes_far-n_spines_pre_start_far);
%T2_far residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
   +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+1) ...
  :(n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
    +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
    +2*n_v_sep ...
    +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
    +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1)) ...
    = T2_far(T2_nodes_far-n_spines_pre_start_far);
%S1_far residuals
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
    +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
    +2*n_v_sep ...
    +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
    +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
    +1) ...
   :(n_Mr_near+n_Mz_near+n_C_near ...
     +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
     +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
     +2*n_v_sep ...
     +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
     +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
     +n_S1_far-1)) ...
    = S1_far(S1_nodes_far-n_spines_pre_start_far);
%K_far residuals (except for first which is added to the last
%residual in the near-field equations)
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
   +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
   +n_S1_far-1+1) ...
  :(n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
    +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
    +2*n_v_sep ...
    +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
    +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
    +n_S1_far-1+n_K_far-1)) ...
    = K_far(K_nodes_far-n_K_near+1);
%E1_far residuals (except for first which is added to the last
%residual in the near-field equations)
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
   +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
   +n_S1_far-1+n_K_far-1+1) ...
  :(n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
    +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
    +2*n_v_sep ...
    +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
    +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
    +n_S1_far-1+n_K_far-1+n_E1_far-1)) ...
    = E1_far(E1_nodes_far-n_spines_pre_start_far);
%D1_far residuals (except for first which is added to the last
%residual in the near-field equations)
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
   +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
   +n_S1_far-1+n_K_far-1+n_E1_far-1+1) ...
  :(n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
    +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
    +2*n_v_sep ...
    +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
    +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
    +n_S1_far-1+n_K_far-1+n_E1_far-1+n_D1_far-1)) ...
    = D1_far(D1_nodes_far-n_spines_pre_start_far);
%T1_far residuals (except for first which is added to the last
%residual in the near-field equations)
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
   +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
   +n_S1_far-1+n_K_far-1+n_E1_far-1+n_D1_far-1+1) ...
  :(n_Mr_near+n_Mz_near+n_C_near ...
    +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
    +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
    +2*n_v_sep ...
    +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
    +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
    +n_S1_far-1+n_K_far-1+n_E1_far-1+n_D1_far-1+n_T1_far-1)) ...
    = T1_far(T1_nodes_far-n_spines_pre_start_far);
%Y
R((n_Mr_near+n_Mz_near+n_C_near ...
   +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
   +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
   +2*n_v_sep ...
   +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
   +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
   +n_S1_far-1+n_K_far-1+n_E1_far-1+n_D1_far-1+n_T1_far-1 ...
   +1)) ...
    = Y;
%Cp residual
    R((n_Mr_near+n_Mz_near+n_C_near ...
       +n_S2_near+n_I_near+n_E2_near+n_D2_near+n_T2_near ...
       +n_S1_near+n_K_near+n_E1_near+n_D1_near+n_T1_near ...
       +2*n_v_sep ...
       +n_Mr_far-n_v_sep+n_Mz_far-n_v_sep+n_C_far-n_p_sep ...
       +n_S2_far-1+n_I_far-1+n_E2_far-1+n_D2_far-1+n_T2_far-1 ...
       +n_S1_far-1+n_K_far-1+n_E1_far-1+n_D1_far-1+n_T1_far-1 ...
       +2)) ...
        = Cp;